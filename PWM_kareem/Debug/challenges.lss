
challenges.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000055e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000005d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  000005d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000604  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000640  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000804  00000000  00000000  000006d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000067d  00000000  00000000  00000ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000561  00000000  00000000  00001551  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000015c  00000000  00000000  00001ab4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003b0  00000000  00000000  00001c10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000253  00000000  00000000  00001fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00002213  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__vector_10>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <main>
  74:	0c 94 ad 02 	jmp	0x55a	; 0x55a <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_SetPinDirection>:
/* Description! define if pin will be used as input or output                          */
/* Input      ! pin num , and pin direction (input or output)                          */
/* Output     ! Nothing                                                                */
/***************************************************************************************/

void DIO_SetPinDirection(uint8 PinNum , uint8 PinDirection){
  7c:	cf 93       	push	r28
  7e:	df 93       	push	r29
  80:	00 d0       	rcall	.+0      	; 0x82 <DIO_SetPinDirection+0x6>
  82:	1f 92       	push	r1
  84:	cd b7       	in	r28, 0x3d	; 61
  86:	de b7       	in	r29, 0x3e	; 62
  88:	8a 83       	std	Y+2, r24	; 0x02
  8a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 bit_num ;
	/* PORTA */
	if((PinNum>=DIO_PORTA_PIN0) && (PinNum<=DIO_PORTA_PIN7)){
  8c:	8a 81       	ldd	r24, Y+2	; 0x02
  8e:	88 30       	cpi	r24, 0x08	; 8
  90:	70 f5       	brcc	.+92     	; 0xee <DIO_SetPinDirection+0x72>
		bit_num = PinNum ;
  92:	8a 81       	ldd	r24, Y+2	; 0x02
  94:	89 83       	std	Y+1, r24	; 0x01
		if(PinDirection){
  96:	8b 81       	ldd	r24, Y+3	; 0x03
  98:	88 23       	and	r24, r24
  9a:	a1 f0       	breq	.+40     	; 0xc4 <DIO_SetPinDirection+0x48>
			Set_Bit(DDR_A,bit_num);
  9c:	8a e3       	ldi	r24, 0x3A	; 58
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	2a e3       	ldi	r18, 0x3A	; 58
  a2:	30 e0       	ldi	r19, 0x00	; 0
  a4:	f9 01       	movw	r30, r18
  a6:	60 81       	ld	r22, Z
  a8:	29 81       	ldd	r18, Y+1	; 0x01
  aa:	42 2f       	mov	r20, r18
  ac:	50 e0       	ldi	r21, 0x00	; 0
  ae:	21 e0       	ldi	r18, 0x01	; 1
  b0:	30 e0       	ldi	r19, 0x00	; 0
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <DIO_SetPinDirection+0x3c>
  b4:	22 0f       	add	r18, r18
  b6:	33 1f       	adc	r19, r19
  b8:	4a 95       	dec	r20
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <DIO_SetPinDirection+0x38>
  bc:	26 2b       	or	r18, r22
  be:	fc 01       	movw	r30, r24
  c0:	20 83       	st	Z, r18
			Clear_Bit(DDR_D,bit_num);
			
		}
	}
	
}
  c2:	b4 c0       	rjmp	.+360    	; 0x22c <DIO_SetPinDirection+0x1b0>
		bit_num = PinNum ;
		if(PinDirection){
			Set_Bit(DDR_A,bit_num);
		}
		else{
			Clear_Bit(DDR_A,bit_num);
  c4:	8a e3       	ldi	r24, 0x3A	; 58
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	2a e3       	ldi	r18, 0x3A	; 58
  ca:	30 e0       	ldi	r19, 0x00	; 0
  cc:	f9 01       	movw	r30, r18
  ce:	60 81       	ld	r22, Z
  d0:	29 81       	ldd	r18, Y+1	; 0x01
  d2:	42 2f       	mov	r20, r18
  d4:	50 e0       	ldi	r21, 0x00	; 0
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	30 e0       	ldi	r19, 0x00	; 0
  da:	02 c0       	rjmp	.+4      	; 0xe0 <DIO_SetPinDirection+0x64>
  dc:	22 0f       	add	r18, r18
  de:	33 1f       	adc	r19, r19
  e0:	4a 95       	dec	r20
  e2:	e2 f7       	brpl	.-8      	; 0xdc <DIO_SetPinDirection+0x60>
  e4:	20 95       	com	r18
  e6:	26 23       	and	r18, r22
  e8:	fc 01       	movw	r30, r24
  ea:	20 83       	st	Z, r18
			Clear_Bit(DDR_D,bit_num);
			
		}
	}
	
}
  ec:	9f c0       	rjmp	.+318    	; 0x22c <DIO_SetPinDirection+0x1b0>
			
		}
		
	}
	/* PORTB */ 
	else if((PinNum>=DIO_PORTB_PIN0) && (PinNum<=DIO_PORTB_PIN7)){
  ee:	8a 81       	ldd	r24, Y+2	; 0x02
  f0:	88 30       	cpi	r24, 0x08	; 8
  f2:	90 f1       	brcs	.+100    	; 0x158 <DIO_SetPinDirection+0xdc>
  f4:	8a 81       	ldd	r24, Y+2	; 0x02
  f6:	80 31       	cpi	r24, 0x10	; 16
  f8:	78 f5       	brcc	.+94     	; 0x158 <DIO_SetPinDirection+0xdc>
		bit_num = PinNum-DIO_PORTB_PIN0 ;
  fa:	8a 81       	ldd	r24, Y+2	; 0x02
  fc:	88 50       	subi	r24, 0x08	; 8
  fe:	89 83       	std	Y+1, r24	; 0x01
		if(PinDirection){
 100:	8b 81       	ldd	r24, Y+3	; 0x03
 102:	88 23       	and	r24, r24
 104:	a1 f0       	breq	.+40     	; 0x12e <DIO_SetPinDirection+0xb2>
			Set_Bit(DDR_B,bit_num);
 106:	87 e3       	ldi	r24, 0x37	; 55
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	27 e3       	ldi	r18, 0x37	; 55
 10c:	30 e0       	ldi	r19, 0x00	; 0
 10e:	f9 01       	movw	r30, r18
 110:	60 81       	ld	r22, Z
 112:	29 81       	ldd	r18, Y+1	; 0x01
 114:	42 2f       	mov	r20, r18
 116:	50 e0       	ldi	r21, 0x00	; 0
 118:	21 e0       	ldi	r18, 0x01	; 1
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	02 c0       	rjmp	.+4      	; 0x122 <DIO_SetPinDirection+0xa6>
 11e:	22 0f       	add	r18, r18
 120:	33 1f       	adc	r19, r19
 122:	4a 95       	dec	r20
 124:	e2 f7       	brpl	.-8      	; 0x11e <DIO_SetPinDirection+0xa2>
 126:	26 2b       	or	r18, r22
 128:	fc 01       	movw	r30, r24
 12a:	20 83       	st	Z, r18
		
	}
	/* PORTB */ 
	else if((PinNum>=DIO_PORTB_PIN0) && (PinNum<=DIO_PORTB_PIN7)){
		bit_num = PinNum-DIO_PORTB_PIN0 ;
		if(PinDirection){
 12c:	7f c0       	rjmp	.+254    	; 0x22c <DIO_SetPinDirection+0x1b0>
			Set_Bit(DDR_B,bit_num);
		}
		else{
			Clear_Bit(DDR_B,bit_num);
 12e:	87 e3       	ldi	r24, 0x37	; 55
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	27 e3       	ldi	r18, 0x37	; 55
 134:	30 e0       	ldi	r19, 0x00	; 0
 136:	f9 01       	movw	r30, r18
 138:	60 81       	ld	r22, Z
 13a:	29 81       	ldd	r18, Y+1	; 0x01
 13c:	42 2f       	mov	r20, r18
 13e:	50 e0       	ldi	r21, 0x00	; 0
 140:	21 e0       	ldi	r18, 0x01	; 1
 142:	30 e0       	ldi	r19, 0x00	; 0
 144:	02 c0       	rjmp	.+4      	; 0x14a <DIO_SetPinDirection+0xce>
 146:	22 0f       	add	r18, r18
 148:	33 1f       	adc	r19, r19
 14a:	4a 95       	dec	r20
 14c:	e2 f7       	brpl	.-8      	; 0x146 <DIO_SetPinDirection+0xca>
 14e:	20 95       	com	r18
 150:	26 23       	and	r18, r22
 152:	fc 01       	movw	r30, r24
 154:	20 83       	st	Z, r18
		
	}
	/* PORTB */ 
	else if((PinNum>=DIO_PORTB_PIN0) && (PinNum<=DIO_PORTB_PIN7)){
		bit_num = PinNum-DIO_PORTB_PIN0 ;
		if(PinDirection){
 156:	6a c0       	rjmp	.+212    	; 0x22c <DIO_SetPinDirection+0x1b0>
		
		
	}
	/* PORTC */ 
	
	else if((PinNum>=DIO_PORTC_PIN0) && (PinNum<=DIO_PORTC_PIN7)){
 158:	8a 81       	ldd	r24, Y+2	; 0x02
 15a:	80 31       	cpi	r24, 0x10	; 16
 15c:	90 f1       	brcs	.+100    	; 0x1c2 <DIO_SetPinDirection+0x146>
 15e:	8a 81       	ldd	r24, Y+2	; 0x02
 160:	88 31       	cpi	r24, 0x18	; 24
 162:	78 f5       	brcc	.+94     	; 0x1c2 <DIO_SetPinDirection+0x146>
		bit_num = PinNum-DIO_PORTC_PIN0 ;
 164:	8a 81       	ldd	r24, Y+2	; 0x02
 166:	80 51       	subi	r24, 0x10	; 16
 168:	89 83       	std	Y+1, r24	; 0x01
		if(PinDirection){
 16a:	8b 81       	ldd	r24, Y+3	; 0x03
 16c:	88 23       	and	r24, r24
 16e:	a1 f0       	breq	.+40     	; 0x198 <DIO_SetPinDirection+0x11c>
			Set_Bit(DDR_C,bit_num);
 170:	84 e3       	ldi	r24, 0x34	; 52
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	24 e3       	ldi	r18, 0x34	; 52
 176:	30 e0       	ldi	r19, 0x00	; 0
 178:	f9 01       	movw	r30, r18
 17a:	60 81       	ld	r22, Z
 17c:	29 81       	ldd	r18, Y+1	; 0x01
 17e:	42 2f       	mov	r20, r18
 180:	50 e0       	ldi	r21, 0x00	; 0
 182:	21 e0       	ldi	r18, 0x01	; 1
 184:	30 e0       	ldi	r19, 0x00	; 0
 186:	02 c0       	rjmp	.+4      	; 0x18c <DIO_SetPinDirection+0x110>
 188:	22 0f       	add	r18, r18
 18a:	33 1f       	adc	r19, r19
 18c:	4a 95       	dec	r20
 18e:	e2 f7       	brpl	.-8      	; 0x188 <DIO_SetPinDirection+0x10c>
 190:	26 2b       	or	r18, r22
 192:	fc 01       	movw	r30, r24
 194:	20 83       	st	Z, r18
	}
	/* PORTC */ 
	
	else if((PinNum>=DIO_PORTC_PIN0) && (PinNum<=DIO_PORTC_PIN7)){
		bit_num = PinNum-DIO_PORTC_PIN0 ;
		if(PinDirection){
 196:	4a c0       	rjmp	.+148    	; 0x22c <DIO_SetPinDirection+0x1b0>
			Set_Bit(DDR_C,bit_num);
		}
		else{
			Clear_Bit(DDR_C,bit_num);
 198:	84 e3       	ldi	r24, 0x34	; 52
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	24 e3       	ldi	r18, 0x34	; 52
 19e:	30 e0       	ldi	r19, 0x00	; 0
 1a0:	f9 01       	movw	r30, r18
 1a2:	60 81       	ld	r22, Z
 1a4:	29 81       	ldd	r18, Y+1	; 0x01
 1a6:	42 2f       	mov	r20, r18
 1a8:	50 e0       	ldi	r21, 0x00	; 0
 1aa:	21 e0       	ldi	r18, 0x01	; 1
 1ac:	30 e0       	ldi	r19, 0x00	; 0
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <DIO_SetPinDirection+0x138>
 1b0:	22 0f       	add	r18, r18
 1b2:	33 1f       	adc	r19, r19
 1b4:	4a 95       	dec	r20
 1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <DIO_SetPinDirection+0x134>
 1b8:	20 95       	com	r18
 1ba:	26 23       	and	r18, r22
 1bc:	fc 01       	movw	r30, r24
 1be:	20 83       	st	Z, r18
	}
	/* PORTC */ 
	
	else if((PinNum>=DIO_PORTC_PIN0) && (PinNum<=DIO_PORTC_PIN7)){
		bit_num = PinNum-DIO_PORTC_PIN0 ;
		if(PinDirection){
 1c0:	35 c0       	rjmp	.+106    	; 0x22c <DIO_SetPinDirection+0x1b0>
		
		
		
	}
	/* PORTD */
	else if((PinNum>=DIO_PORTD_PIN0) && (PinNum<=DIO_PORTD_PIN7)){
 1c2:	8a 81       	ldd	r24, Y+2	; 0x02
 1c4:	88 31       	cpi	r24, 0x18	; 24
 1c6:	90 f1       	brcs	.+100    	; 0x22c <DIO_SetPinDirection+0x1b0>
 1c8:	8a 81       	ldd	r24, Y+2	; 0x02
 1ca:	80 32       	cpi	r24, 0x20	; 32
 1cc:	78 f5       	brcc	.+94     	; 0x22c <DIO_SetPinDirection+0x1b0>
		bit_num = PinNum-DIO_PORTD_PIN0 ;
 1ce:	8a 81       	ldd	r24, Y+2	; 0x02
 1d0:	88 51       	subi	r24, 0x18	; 24
 1d2:	89 83       	std	Y+1, r24	; 0x01
		if(PinDirection){
 1d4:	8b 81       	ldd	r24, Y+3	; 0x03
 1d6:	88 23       	and	r24, r24
 1d8:	a1 f0       	breq	.+40     	; 0x202 <DIO_SetPinDirection+0x186>
			Set_Bit(DDR_D,bit_num);
 1da:	81 e3       	ldi	r24, 0x31	; 49
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	21 e3       	ldi	r18, 0x31	; 49
 1e0:	30 e0       	ldi	r19, 0x00	; 0
 1e2:	f9 01       	movw	r30, r18
 1e4:	60 81       	ld	r22, Z
 1e6:	29 81       	ldd	r18, Y+1	; 0x01
 1e8:	42 2f       	mov	r20, r18
 1ea:	50 e0       	ldi	r21, 0x00	; 0
 1ec:	21 e0       	ldi	r18, 0x01	; 1
 1ee:	30 e0       	ldi	r19, 0x00	; 0
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <DIO_SetPinDirection+0x17a>
 1f2:	22 0f       	add	r18, r18
 1f4:	33 1f       	adc	r19, r19
 1f6:	4a 95       	dec	r20
 1f8:	e2 f7       	brpl	.-8      	; 0x1f2 <DIO_SetPinDirection+0x176>
 1fa:	26 2b       	or	r18, r22
 1fc:	fc 01       	movw	r30, r24
 1fe:	20 83       	st	Z, r18
			Clear_Bit(DDR_D,bit_num);
			
		}
	}
	
}
 200:	15 c0       	rjmp	.+42     	; 0x22c <DIO_SetPinDirection+0x1b0>
		bit_num = PinNum-DIO_PORTD_PIN0 ;
		if(PinDirection){
			Set_Bit(DDR_D,bit_num);
		}
		else{
			Clear_Bit(DDR_D,bit_num);
 202:	81 e3       	ldi	r24, 0x31	; 49
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	21 e3       	ldi	r18, 0x31	; 49
 208:	30 e0       	ldi	r19, 0x00	; 0
 20a:	f9 01       	movw	r30, r18
 20c:	60 81       	ld	r22, Z
 20e:	29 81       	ldd	r18, Y+1	; 0x01
 210:	42 2f       	mov	r20, r18
 212:	50 e0       	ldi	r21, 0x00	; 0
 214:	21 e0       	ldi	r18, 0x01	; 1
 216:	30 e0       	ldi	r19, 0x00	; 0
 218:	02 c0       	rjmp	.+4      	; 0x21e <DIO_SetPinDirection+0x1a2>
 21a:	22 0f       	add	r18, r18
 21c:	33 1f       	adc	r19, r19
 21e:	4a 95       	dec	r20
 220:	e2 f7       	brpl	.-8      	; 0x21a <DIO_SetPinDirection+0x19e>
 222:	20 95       	com	r18
 224:	26 23       	and	r18, r22
 226:	fc 01       	movw	r30, r24
 228:	20 83       	st	Z, r18
			
		}
	}
	
}
 22a:	00 c0       	rjmp	.+0      	; 0x22c <DIO_SetPinDirection+0x1b0>
 22c:	00 00       	nop
 22e:	0f 90       	pop	r0
 230:	0f 90       	pop	r0
 232:	0f 90       	pop	r0
 234:	df 91       	pop	r29
 236:	cf 91       	pop	r28
 238:	08 95       	ret

0000023a <DIO_WritePin>:
/* Description! Writing in specific pin in DIO ports                                   */
/* Input      ! Pin_num , pin value (High or Low)                                      */
/* Output     ! Nothing                                                                */
/***************************************************************************************/

void DIO_WritePin(uint8 PinNum,uint8 PinValue){
 23a:	cf 93       	push	r28
 23c:	df 93       	push	r29
 23e:	00 d0       	rcall	.+0      	; 0x240 <DIO_WritePin+0x6>
 240:	1f 92       	push	r1
 242:	cd b7       	in	r28, 0x3d	; 61
 244:	de b7       	in	r29, 0x3e	; 62
 246:	8a 83       	std	Y+2, r24	; 0x02
 248:	6b 83       	std	Y+3, r22	; 0x03
	uint8 bit_num ;
	/* PORTA */
	if((PinNum>=DIO_PORTA_PIN0) && (PinNum<=DIO_PORTA_PIN7)){
 24a:	8a 81       	ldd	r24, Y+2	; 0x02
 24c:	88 30       	cpi	r24, 0x08	; 8
 24e:	70 f5       	brcc	.+92     	; 0x2ac <DIO_WritePin+0x72>
		bit_num = PinNum ;
 250:	8a 81       	ldd	r24, Y+2	; 0x02
 252:	89 83       	std	Y+1, r24	; 0x01
		if(PinValue){		
 254:	8b 81       	ldd	r24, Y+3	; 0x03
 256:	88 23       	and	r24, r24
 258:	a1 f0       	breq	.+40     	; 0x282 <DIO_WritePin+0x48>
			Set_Bit(PORT_A,bit_num);			
 25a:	8b e3       	ldi	r24, 0x3B	; 59
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	2b e3       	ldi	r18, 0x3B	; 59
 260:	30 e0       	ldi	r19, 0x00	; 0
 262:	f9 01       	movw	r30, r18
 264:	60 81       	ld	r22, Z
 266:	29 81       	ldd	r18, Y+1	; 0x01
 268:	42 2f       	mov	r20, r18
 26a:	50 e0       	ldi	r21, 0x00	; 0
 26c:	21 e0       	ldi	r18, 0x01	; 1
 26e:	30 e0       	ldi	r19, 0x00	; 0
 270:	02 c0       	rjmp	.+4      	; 0x276 <DIO_WritePin+0x3c>
 272:	22 0f       	add	r18, r18
 274:	33 1f       	adc	r19, r19
 276:	4a 95       	dec	r20
 278:	e2 f7       	brpl	.-8      	; 0x272 <DIO_WritePin+0x38>
 27a:	26 2b       	or	r18, r22
 27c:	fc 01       	movw	r30, r24
 27e:	20 83       	st	Z, r18
		else{
			Clear_Bit(PORT_D,bit_num);
			
		}
		}
}
 280:	b4 c0       	rjmp	.+360    	; 0x3ea <DIO_WritePin+0x1b0>
		bit_num = PinNum ;
		if(PinValue){		
			Set_Bit(PORT_A,bit_num);			
		}
		else{
			Clear_Bit(PORT_A,bit_num);	
 282:	8b e3       	ldi	r24, 0x3B	; 59
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	2b e3       	ldi	r18, 0x3B	; 59
 288:	30 e0       	ldi	r19, 0x00	; 0
 28a:	f9 01       	movw	r30, r18
 28c:	60 81       	ld	r22, Z
 28e:	29 81       	ldd	r18, Y+1	; 0x01
 290:	42 2f       	mov	r20, r18
 292:	50 e0       	ldi	r21, 0x00	; 0
 294:	21 e0       	ldi	r18, 0x01	; 1
 296:	30 e0       	ldi	r19, 0x00	; 0
 298:	02 c0       	rjmp	.+4      	; 0x29e <DIO_WritePin+0x64>
 29a:	22 0f       	add	r18, r18
 29c:	33 1f       	adc	r19, r19
 29e:	4a 95       	dec	r20
 2a0:	e2 f7       	brpl	.-8      	; 0x29a <DIO_WritePin+0x60>
 2a2:	20 95       	com	r18
 2a4:	26 23       	and	r18, r22
 2a6:	fc 01       	movw	r30, r24
 2a8:	20 83       	st	Z, r18
		else{
			Clear_Bit(PORT_D,bit_num);
			
		}
		}
}
 2aa:	9f c0       	rjmp	.+318    	; 0x3ea <DIO_WritePin+0x1b0>
		else{
			Clear_Bit(PORT_A,bit_num);	
		}
	}
	/* PORTB */
	else if((PinNum>=DIO_PORTB_PIN0) && (PinNum<=DIO_PORTB_PIN7)){
 2ac:	8a 81       	ldd	r24, Y+2	; 0x02
 2ae:	88 30       	cpi	r24, 0x08	; 8
 2b0:	90 f1       	brcs	.+100    	; 0x316 <DIO_WritePin+0xdc>
 2b2:	8a 81       	ldd	r24, Y+2	; 0x02
 2b4:	80 31       	cpi	r24, 0x10	; 16
 2b6:	78 f5       	brcc	.+94     	; 0x316 <DIO_WritePin+0xdc>
		bit_num = PinNum-DIO_PORTB_PIN0 ;
 2b8:	8a 81       	ldd	r24, Y+2	; 0x02
 2ba:	88 50       	subi	r24, 0x08	; 8
 2bc:	89 83       	std	Y+1, r24	; 0x01
		if(PinValue){
 2be:	8b 81       	ldd	r24, Y+3	; 0x03
 2c0:	88 23       	and	r24, r24
 2c2:	a1 f0       	breq	.+40     	; 0x2ec <DIO_WritePin+0xb2>
			Set_Bit(PORT_B,bit_num);
 2c4:	88 e3       	ldi	r24, 0x38	; 56
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	28 e3       	ldi	r18, 0x38	; 56
 2ca:	30 e0       	ldi	r19, 0x00	; 0
 2cc:	f9 01       	movw	r30, r18
 2ce:	60 81       	ld	r22, Z
 2d0:	29 81       	ldd	r18, Y+1	; 0x01
 2d2:	42 2f       	mov	r20, r18
 2d4:	50 e0       	ldi	r21, 0x00	; 0
 2d6:	21 e0       	ldi	r18, 0x01	; 1
 2d8:	30 e0       	ldi	r19, 0x00	; 0
 2da:	02 c0       	rjmp	.+4      	; 0x2e0 <DIO_WritePin+0xa6>
 2dc:	22 0f       	add	r18, r18
 2de:	33 1f       	adc	r19, r19
 2e0:	4a 95       	dec	r20
 2e2:	e2 f7       	brpl	.-8      	; 0x2dc <DIO_WritePin+0xa2>
 2e4:	26 2b       	or	r18, r22
 2e6:	fc 01       	movw	r30, r24
 2e8:	20 83       	st	Z, r18
		}
	}
	/* PORTB */
	else if((PinNum>=DIO_PORTB_PIN0) && (PinNum<=DIO_PORTB_PIN7)){
		bit_num = PinNum-DIO_PORTB_PIN0 ;
		if(PinValue){
 2ea:	7f c0       	rjmp	.+254    	; 0x3ea <DIO_WritePin+0x1b0>
			Set_Bit(PORT_B,bit_num);
		}
		else{
			Clear_Bit(PORT_B,bit_num);	
 2ec:	88 e3       	ldi	r24, 0x38	; 56
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	28 e3       	ldi	r18, 0x38	; 56
 2f2:	30 e0       	ldi	r19, 0x00	; 0
 2f4:	f9 01       	movw	r30, r18
 2f6:	60 81       	ld	r22, Z
 2f8:	29 81       	ldd	r18, Y+1	; 0x01
 2fa:	42 2f       	mov	r20, r18
 2fc:	50 e0       	ldi	r21, 0x00	; 0
 2fe:	21 e0       	ldi	r18, 0x01	; 1
 300:	30 e0       	ldi	r19, 0x00	; 0
 302:	02 c0       	rjmp	.+4      	; 0x308 <DIO_WritePin+0xce>
 304:	22 0f       	add	r18, r18
 306:	33 1f       	adc	r19, r19
 308:	4a 95       	dec	r20
 30a:	e2 f7       	brpl	.-8      	; 0x304 <DIO_WritePin+0xca>
 30c:	20 95       	com	r18
 30e:	26 23       	and	r18, r22
 310:	fc 01       	movw	r30, r24
 312:	20 83       	st	Z, r18
		}
	}
	/* PORTB */
	else if((PinNum>=DIO_PORTB_PIN0) && (PinNum<=DIO_PORTB_PIN7)){
		bit_num = PinNum-DIO_PORTB_PIN0 ;
		if(PinValue){
 314:	6a c0       	rjmp	.+212    	; 0x3ea <DIO_WritePin+0x1b0>
		
		
	}
	/* PORTC */
	
	else if((PinNum>=DIO_PORTC_PIN0) && (PinNum<=DIO_PORTC_PIN7)){
 316:	8a 81       	ldd	r24, Y+2	; 0x02
 318:	80 31       	cpi	r24, 0x10	; 16
 31a:	90 f1       	brcs	.+100    	; 0x380 <DIO_WritePin+0x146>
 31c:	8a 81       	ldd	r24, Y+2	; 0x02
 31e:	88 31       	cpi	r24, 0x18	; 24
 320:	78 f5       	brcc	.+94     	; 0x380 <DIO_WritePin+0x146>
		bit_num = PinNum-DIO_PORTC_PIN0 ;
 322:	8a 81       	ldd	r24, Y+2	; 0x02
 324:	80 51       	subi	r24, 0x10	; 16
 326:	89 83       	std	Y+1, r24	; 0x01
		if(PinValue){
 328:	8b 81       	ldd	r24, Y+3	; 0x03
 32a:	88 23       	and	r24, r24
 32c:	a1 f0       	breq	.+40     	; 0x356 <DIO_WritePin+0x11c>
			Set_Bit(PORT_C,bit_num);
 32e:	85 e3       	ldi	r24, 0x35	; 53
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	25 e3       	ldi	r18, 0x35	; 53
 334:	30 e0       	ldi	r19, 0x00	; 0
 336:	f9 01       	movw	r30, r18
 338:	60 81       	ld	r22, Z
 33a:	29 81       	ldd	r18, Y+1	; 0x01
 33c:	42 2f       	mov	r20, r18
 33e:	50 e0       	ldi	r21, 0x00	; 0
 340:	21 e0       	ldi	r18, 0x01	; 1
 342:	30 e0       	ldi	r19, 0x00	; 0
 344:	02 c0       	rjmp	.+4      	; 0x34a <DIO_WritePin+0x110>
 346:	22 0f       	add	r18, r18
 348:	33 1f       	adc	r19, r19
 34a:	4a 95       	dec	r20
 34c:	e2 f7       	brpl	.-8      	; 0x346 <DIO_WritePin+0x10c>
 34e:	26 2b       	or	r18, r22
 350:	fc 01       	movw	r30, r24
 352:	20 83       	st	Z, r18
	}
	/* PORTC */
	
	else if((PinNum>=DIO_PORTC_PIN0) && (PinNum<=DIO_PORTC_PIN7)){
		bit_num = PinNum-DIO_PORTC_PIN0 ;
		if(PinValue){
 354:	4a c0       	rjmp	.+148    	; 0x3ea <DIO_WritePin+0x1b0>
			Set_Bit(PORT_C,bit_num);
		}
		else{
			Clear_Bit(PORT_C,bit_num);
 356:	85 e3       	ldi	r24, 0x35	; 53
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	25 e3       	ldi	r18, 0x35	; 53
 35c:	30 e0       	ldi	r19, 0x00	; 0
 35e:	f9 01       	movw	r30, r18
 360:	60 81       	ld	r22, Z
 362:	29 81       	ldd	r18, Y+1	; 0x01
 364:	42 2f       	mov	r20, r18
 366:	50 e0       	ldi	r21, 0x00	; 0
 368:	21 e0       	ldi	r18, 0x01	; 1
 36a:	30 e0       	ldi	r19, 0x00	; 0
 36c:	02 c0       	rjmp	.+4      	; 0x372 <DIO_WritePin+0x138>
 36e:	22 0f       	add	r18, r18
 370:	33 1f       	adc	r19, r19
 372:	4a 95       	dec	r20
 374:	e2 f7       	brpl	.-8      	; 0x36e <DIO_WritePin+0x134>
 376:	20 95       	com	r18
 378:	26 23       	and	r18, r22
 37a:	fc 01       	movw	r30, r24
 37c:	20 83       	st	Z, r18
	}
	/* PORTC */
	
	else if((PinNum>=DIO_PORTC_PIN0) && (PinNum<=DIO_PORTC_PIN7)){
		bit_num = PinNum-DIO_PORTC_PIN0 ;
		if(PinValue){
 37e:	35 c0       	rjmp	.+106    	; 0x3ea <DIO_WritePin+0x1b0>
			
		}
		
	}
	/* PORTD */
	else if((PinNum>=DIO_PORTD_PIN0) && (PinNum<=DIO_PORTD_PIN7)){
 380:	8a 81       	ldd	r24, Y+2	; 0x02
 382:	88 31       	cpi	r24, 0x18	; 24
 384:	90 f1       	brcs	.+100    	; 0x3ea <DIO_WritePin+0x1b0>
 386:	8a 81       	ldd	r24, Y+2	; 0x02
 388:	80 32       	cpi	r24, 0x20	; 32
 38a:	78 f5       	brcc	.+94     	; 0x3ea <DIO_WritePin+0x1b0>
		bit_num = PinNum-DIO_PORTD_PIN0 ;
 38c:	8a 81       	ldd	r24, Y+2	; 0x02
 38e:	88 51       	subi	r24, 0x18	; 24
 390:	89 83       	std	Y+1, r24	; 0x01
		if(PinValue){
 392:	8b 81       	ldd	r24, Y+3	; 0x03
 394:	88 23       	and	r24, r24
 396:	a1 f0       	breq	.+40     	; 0x3c0 <DIO_WritePin+0x186>
			Set_Bit(PORT_D,bit_num);
 398:	82 e3       	ldi	r24, 0x32	; 50
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	22 e3       	ldi	r18, 0x32	; 50
 39e:	30 e0       	ldi	r19, 0x00	; 0
 3a0:	f9 01       	movw	r30, r18
 3a2:	60 81       	ld	r22, Z
 3a4:	29 81       	ldd	r18, Y+1	; 0x01
 3a6:	42 2f       	mov	r20, r18
 3a8:	50 e0       	ldi	r21, 0x00	; 0
 3aa:	21 e0       	ldi	r18, 0x01	; 1
 3ac:	30 e0       	ldi	r19, 0x00	; 0
 3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <DIO_WritePin+0x17a>
 3b0:	22 0f       	add	r18, r18
 3b2:	33 1f       	adc	r19, r19
 3b4:	4a 95       	dec	r20
 3b6:	e2 f7       	brpl	.-8      	; 0x3b0 <DIO_WritePin+0x176>
 3b8:	26 2b       	or	r18, r22
 3ba:	fc 01       	movw	r30, r24
 3bc:	20 83       	st	Z, r18
		else{
			Clear_Bit(PORT_D,bit_num);
			
		}
		}
}
 3be:	15 c0       	rjmp	.+42     	; 0x3ea <DIO_WritePin+0x1b0>
		bit_num = PinNum-DIO_PORTD_PIN0 ;
		if(PinValue){
			Set_Bit(PORT_D,bit_num);
		}
		else{
			Clear_Bit(PORT_D,bit_num);
 3c0:	82 e3       	ldi	r24, 0x32	; 50
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	22 e3       	ldi	r18, 0x32	; 50
 3c6:	30 e0       	ldi	r19, 0x00	; 0
 3c8:	f9 01       	movw	r30, r18
 3ca:	60 81       	ld	r22, Z
 3cc:	29 81       	ldd	r18, Y+1	; 0x01
 3ce:	42 2f       	mov	r20, r18
 3d0:	50 e0       	ldi	r21, 0x00	; 0
 3d2:	21 e0       	ldi	r18, 0x01	; 1
 3d4:	30 e0       	ldi	r19, 0x00	; 0
 3d6:	02 c0       	rjmp	.+4      	; 0x3dc <DIO_WritePin+0x1a2>
 3d8:	22 0f       	add	r18, r18
 3da:	33 1f       	adc	r19, r19
 3dc:	4a 95       	dec	r20
 3de:	e2 f7       	brpl	.-8      	; 0x3d8 <DIO_WritePin+0x19e>
 3e0:	20 95       	com	r18
 3e2:	26 23       	and	r18, r22
 3e4:	fc 01       	movw	r30, r24
 3e6:	20 83       	st	Z, r18
			
		}
		}
}
 3e8:	00 c0       	rjmp	.+0      	; 0x3ea <DIO_WritePin+0x1b0>
 3ea:	00 00       	nop
 3ec:	0f 90       	pop	r0
 3ee:	0f 90       	pop	r0
 3f0:	0f 90       	pop	r0
 3f2:	df 91       	pop	r29
 3f4:	cf 91       	pop	r28
 3f6:	08 95       	ret

000003f8 <main>:
#define output 1 
#define High 1
#define Low  0 

int main(void)
{
 3f8:	cf 93       	push	r28
 3fa:	df 93       	push	r29
 3fc:	cd b7       	in	r28, 0x3d	; 61
 3fe:	de b7       	in	r29, 0x3e	; 62
   /* intialize external interrupt */
   
   DIO_WritePin(26,High);
 400:	61 e0       	ldi	r22, 0x01	; 1
 402:	8a e1       	ldi	r24, 0x1A	; 26
 404:	0e 94 1d 01 	call	0x23a	; 0x23a <DIO_WritePin>
   DIO_WritePin(27,Low);
 408:	60 e0       	ldi	r22, 0x00	; 0
 40a:	8b e1       	ldi	r24, 0x1B	; 27
 40c:	0e 94 1d 01 	call	0x23a	; 0x23a <DIO_WritePin>
   DIO_WritePin(30,High);
 410:	61 e0       	ldi	r22, 0x01	; 1
 412:	8e e1       	ldi	r24, 0x1E	; 30
 414:	0e 94 1d 01 	call	0x23a	; 0x23a <DIO_WritePin>
   DIO_WritePin(31,Low);
 418:	60 e0       	ldi	r22, 0x00	; 0
 41a:	8f e1       	ldi	r24, 0x1F	; 31
 41c:	0e 94 1d 01 	call	0x23a	; 0x23a <DIO_WritePin>
   timer1_init(20);
 420:	84 e1       	ldi	r24, 0x14	; 20
 422:	0e 94 14 02 	call	0x428	; 0x428 <timer1_init>
    while (1) 
    {


	}
 426:	ff cf       	rjmp	.-2      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>

00000428 <timer1_init>:
/* Output     ! Nothing                                                                */
/***************************************************************************************/

void timer1_pwm(void){

}
 428:	cf 93       	push	r28
 42a:	df 93       	push	r29
 42c:	1f 92       	push	r1
 42e:	cd b7       	in	r28, 0x3d	; 61
 430:	de b7       	in	r29, 0x3e	; 62
 432:	89 83       	std	Y+1, r24	; 0x01
 434:	87 e4       	ldi	r24, 0x47	; 71
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	27 e1       	ldi	r18, 0x17	; 23
 43a:	fc 01       	movw	r30, r24
 43c:	20 83       	st	Z, r18
 43e:	86 e4       	ldi	r24, 0x46	; 70
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	20 e7       	ldi	r18, 0x70	; 112
 444:	fc 01       	movw	r30, r24
 446:	20 83       	st	Z, r18
 448:	61 e0       	ldi	r22, 0x01	; 1
 44a:	70 e0       	ldi	r23, 0x00	; 0
 44c:	8a e1       	ldi	r24, 0x1A	; 26
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_SetPinDirection>
 454:	61 e0       	ldi	r22, 0x01	; 1
 456:	70 e0       	ldi	r23, 0x00	; 0
 458:	8b e1       	ldi	r24, 0x1B	; 27
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_SetPinDirection>
 460:	61 e0       	ldi	r22, 0x01	; 1
 462:	70 e0       	ldi	r23, 0x00	; 0
 464:	8c e1       	ldi	r24, 0x1C	; 28
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_SetPinDirection>
 46c:	61 e0       	ldi	r22, 0x01	; 1
 46e:	70 e0       	ldi	r23, 0x00	; 0
 470:	8e e1       	ldi	r24, 0x1E	; 30
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_SetPinDirection>
 478:	61 e0       	ldi	r22, 0x01	; 1
 47a:	70 e0       	ldi	r23, 0x00	; 0
 47c:	8f e1       	ldi	r24, 0x1F	; 31
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_SetPinDirection>
 484:	61 e0       	ldi	r22, 0x01	; 1
 486:	70 e0       	ldi	r23, 0x00	; 0
 488:	8d e1       	ldi	r24, 0x1D	; 29
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_SetPinDirection>
 490:	4a e4       	ldi	r20, 0x4A	; 74
 492:	50 e0       	ldi	r21, 0x00	; 0
 494:	89 81       	ldd	r24, Y+1	; 0x01
 496:	68 2f       	mov	r22, r24
 498:	70 e0       	ldi	r23, 0x00	; 0
 49a:	21 e7       	ldi	r18, 0x71	; 113
 49c:	37 e1       	ldi	r19, 0x17	; 23
 49e:	62 9f       	mul	r22, r18
 4a0:	c0 01       	movw	r24, r0
 4a2:	63 9f       	mul	r22, r19
 4a4:	90 0d       	add	r25, r0
 4a6:	72 9f       	mul	r23, r18
 4a8:	90 0d       	add	r25, r0
 4aa:	11 24       	eor	r1, r1
 4ac:	96 95       	lsr	r25
 4ae:	87 95       	ror	r24
 4b0:	96 95       	lsr	r25
 4b2:	87 95       	ror	r24
 4b4:	9c 01       	movw	r18, r24
 4b6:	ab e7       	ldi	r26, 0x7B	; 123
 4b8:	b4 e1       	ldi	r27, 0x14	; 20
 4ba:	0e 94 9e 02 	call	0x53c	; 0x53c <__umulhisi3>
 4be:	96 95       	lsr	r25
 4c0:	87 95       	ror	r24
 4c2:	fa 01       	movw	r30, r20
 4c4:	80 83       	st	Z, r24
 4c6:	4b e4       	ldi	r20, 0x4B	; 75
 4c8:	50 e0       	ldi	r21, 0x00	; 0
 4ca:	89 81       	ldd	r24, Y+1	; 0x01
 4cc:	68 2f       	mov	r22, r24
 4ce:	70 e0       	ldi	r23, 0x00	; 0
 4d0:	21 e7       	ldi	r18, 0x71	; 113
 4d2:	37 e1       	ldi	r19, 0x17	; 23
 4d4:	62 9f       	mul	r22, r18
 4d6:	c0 01       	movw	r24, r0
 4d8:	63 9f       	mul	r22, r19
 4da:	90 0d       	add	r25, r0
 4dc:	72 9f       	mul	r23, r18
 4de:	90 0d       	add	r25, r0
 4e0:	11 24       	eor	r1, r1
 4e2:	96 95       	lsr	r25
 4e4:	87 95       	ror	r24
 4e6:	96 95       	lsr	r25
 4e8:	87 95       	ror	r24
 4ea:	9c 01       	movw	r18, r24
 4ec:	ab e7       	ldi	r26, 0x7B	; 123
 4ee:	b4 e1       	ldi	r27, 0x14	; 20
 4f0:	0e 94 9e 02 	call	0x53c	; 0x53c <__umulhisi3>
 4f4:	96 95       	lsr	r25
 4f6:	87 95       	ror	r24
 4f8:	89 2f       	mov	r24, r25
 4fa:	99 27       	eor	r25, r25
 4fc:	fa 01       	movw	r30, r20
 4fe:	80 83       	st	Z, r24
 500:	8f e4       	ldi	r24, 0x4F	; 79
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	22 ea       	ldi	r18, 0xA2	; 162
 506:	fc 01       	movw	r30, r24
 508:	20 83       	st	Z, r18
 50a:	8e e4       	ldi	r24, 0x4E	; 78
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	2a e1       	ldi	r18, 0x1A	; 26
 510:	fc 01       	movw	r30, r24
 512:	20 83       	st	Z, r18
 514:	00 00       	nop
 516:	0f 90       	pop	r0
 518:	df 91       	pop	r29
 51a:	cf 91       	pop	r28
 51c:	08 95       	ret

0000051e <__vector_10>:
/***************************************************************************************/
/* Description! ISR Timer/Counter0 Compare Match                                                           */
/* Input      ! Nothing                                                   */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
void __vector_10 (void){
 51e:	cf 93       	push	r28
 520:	df 93       	push	r29
 522:	cd b7       	in	r28, 0x3d	; 61
 524:	de b7       	in	r29, 0x3e	; 62
	/* that means  it has been 2msec */
	counts_ms++;
 526:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 52a:	8f 5f       	subi	r24, 0xFF	; 255
 52c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
	/* count_ms increases by ONE if it equals 500 it means ONE sec */
	if (counts_ms>ONESEC)
 530:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
		/* change the state as it has been 1 sec */
		change_state++;	
		/* reset flag to zero to start count 1 sec again */
		counts_ms=0;
	}
 534:	00 00       	nop
 536:	df 91       	pop	r29
 538:	cf 91       	pop	r28
 53a:	08 95       	ret

0000053c <__umulhisi3>:
 53c:	a2 9f       	mul	r26, r18
 53e:	b0 01       	movw	r22, r0
 540:	b3 9f       	mul	r27, r19
 542:	c0 01       	movw	r24, r0
 544:	a3 9f       	mul	r26, r19
 546:	70 0d       	add	r23, r0
 548:	81 1d       	adc	r24, r1
 54a:	11 24       	eor	r1, r1
 54c:	91 1d       	adc	r25, r1
 54e:	b2 9f       	mul	r27, r18
 550:	70 0d       	add	r23, r0
 552:	81 1d       	adc	r24, r1
 554:	11 24       	eor	r1, r1
 556:	91 1d       	adc	r25, r1
 558:	08 95       	ret

0000055a <_exit>:
 55a:	f8 94       	cli

0000055c <__stop_program>:
 55c:	ff cf       	rjmp	.-2      	; 0x55c <__stop_program>
