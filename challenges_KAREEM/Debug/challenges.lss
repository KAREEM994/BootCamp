
challenges.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001620  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00001674  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00001674  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000016a4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  000016e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000105e  00000000  00000000  00001780  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000071c  00000000  00000000  000027de  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000d0d  00000000  00000000  00002efa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001b4  00000000  00000000  00003c08  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000041c  00000000  00000000  00003dbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000033c  00000000  00000000  000041d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  00004514  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
       8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
       c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61
      60:	0e 94 74 09 	call	0x12e8	; 0x12e8 <main>
      64:	0c 94 0e 0b 	jmp	0x161c	; 0x161c <_exit>

00000068 <__bad_interrupt>:
      68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_SetPinDirection>:
/* Description! define if pin will be used as input or output                          */
/* Input      ! pin num , and pin direction (input or output)                          */
/* Output     ! Nothing                                                                */
/***************************************************************************************/

void DIO_SetPinDirection(uint8 PinNum , uint8 PinDirection){
      6c:	cf 93       	push	r28
      6e:	df 93       	push	r29
      70:	00 d0       	rcall	.+0      	; 0x72 <DIO_SetPinDirection+0x6>
      72:	1f 92       	push	r1
      74:	cd b7       	in	r28, 0x3d	; 61
      76:	de b7       	in	r29, 0x3e	; 62
      78:	8a 83       	std	Y+2, r24	; 0x02
      7a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 bit_num ;
	/* PORTA */
	if((PinNum>=DIO_PORTA_PIN0) && (PinNum<=DIO_PORTA_PIN7)){
      7c:	8a 81       	ldd	r24, Y+2	; 0x02
      7e:	88 30       	cpi	r24, 0x08	; 8
      80:	70 f5       	brcc	.+92     	; 0xde <DIO_SetPinDirection+0x72>
		bit_num = PinNum ;
      82:	8a 81       	ldd	r24, Y+2	; 0x02
      84:	89 83       	std	Y+1, r24	; 0x01
		if(PinDirection){
      86:	8b 81       	ldd	r24, Y+3	; 0x03
      88:	88 23       	and	r24, r24
      8a:	a1 f0       	breq	.+40     	; 0xb4 <DIO_SetPinDirection+0x48>
			Set_Bit(DDR_A,bit_num);
      8c:	8a e3       	ldi	r24, 0x3A	; 58
      8e:	90 e0       	ldi	r25, 0x00	; 0
      90:	2a e3       	ldi	r18, 0x3A	; 58
      92:	30 e0       	ldi	r19, 0x00	; 0
      94:	f9 01       	movw	r30, r18
      96:	60 81       	ld	r22, Z
      98:	29 81       	ldd	r18, Y+1	; 0x01
      9a:	42 2f       	mov	r20, r18
      9c:	50 e0       	ldi	r21, 0x00	; 0
      9e:	21 e0       	ldi	r18, 0x01	; 1
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	02 c0       	rjmp	.+4      	; 0xa8 <DIO_SetPinDirection+0x3c>
      a4:	22 0f       	add	r18, r18
      a6:	33 1f       	adc	r19, r19
      a8:	4a 95       	dec	r20
      aa:	e2 f7       	brpl	.-8      	; 0xa4 <DIO_SetPinDirection+0x38>
      ac:	26 2b       	or	r18, r22
      ae:	fc 01       	movw	r30, r24
      b0:	20 83       	st	Z, r18
			Clear_Bit(DDR_D,bit_num);
			
		}
	}
	
}
      b2:	b4 c0       	rjmp	.+360    	; 0x21c <DIO_SetPinDirection+0x1b0>
		bit_num = PinNum ;
		if(PinDirection){
			Set_Bit(DDR_A,bit_num);
		}
		else{
			Clear_Bit(DDR_A,bit_num);
      b4:	8a e3       	ldi	r24, 0x3A	; 58
      b6:	90 e0       	ldi	r25, 0x00	; 0
      b8:	2a e3       	ldi	r18, 0x3A	; 58
      ba:	30 e0       	ldi	r19, 0x00	; 0
      bc:	f9 01       	movw	r30, r18
      be:	60 81       	ld	r22, Z
      c0:	29 81       	ldd	r18, Y+1	; 0x01
      c2:	42 2f       	mov	r20, r18
      c4:	50 e0       	ldi	r21, 0x00	; 0
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	30 e0       	ldi	r19, 0x00	; 0
      ca:	02 c0       	rjmp	.+4      	; 0xd0 <DIO_SetPinDirection+0x64>
      cc:	22 0f       	add	r18, r18
      ce:	33 1f       	adc	r19, r19
      d0:	4a 95       	dec	r20
      d2:	e2 f7       	brpl	.-8      	; 0xcc <DIO_SetPinDirection+0x60>
      d4:	20 95       	com	r18
      d6:	26 23       	and	r18, r22
      d8:	fc 01       	movw	r30, r24
      da:	20 83       	st	Z, r18
			Clear_Bit(DDR_D,bit_num);
			
		}
	}
	
}
      dc:	9f c0       	rjmp	.+318    	; 0x21c <DIO_SetPinDirection+0x1b0>
			
		}
		
	}
	/* PORTB */ 
	else if((PinNum>=DIO_PORTB_PIN0) && (PinNum<=DIO_PORTB_PIN7)){
      de:	8a 81       	ldd	r24, Y+2	; 0x02
      e0:	88 30       	cpi	r24, 0x08	; 8
      e2:	90 f1       	brcs	.+100    	; 0x148 <DIO_SetPinDirection+0xdc>
      e4:	8a 81       	ldd	r24, Y+2	; 0x02
      e6:	80 31       	cpi	r24, 0x10	; 16
      e8:	78 f5       	brcc	.+94     	; 0x148 <DIO_SetPinDirection+0xdc>
		bit_num = PinNum-DIO_PORTB_PIN0 ;
      ea:	8a 81       	ldd	r24, Y+2	; 0x02
      ec:	88 50       	subi	r24, 0x08	; 8
      ee:	89 83       	std	Y+1, r24	; 0x01
		if(PinDirection){
      f0:	8b 81       	ldd	r24, Y+3	; 0x03
      f2:	88 23       	and	r24, r24
      f4:	a1 f0       	breq	.+40     	; 0x11e <DIO_SetPinDirection+0xb2>
			Set_Bit(DDR_B,bit_num);
      f6:	87 e3       	ldi	r24, 0x37	; 55
      f8:	90 e0       	ldi	r25, 0x00	; 0
      fa:	27 e3       	ldi	r18, 0x37	; 55
      fc:	30 e0       	ldi	r19, 0x00	; 0
      fe:	f9 01       	movw	r30, r18
     100:	60 81       	ld	r22, Z
     102:	29 81       	ldd	r18, Y+1	; 0x01
     104:	42 2f       	mov	r20, r18
     106:	50 e0       	ldi	r21, 0x00	; 0
     108:	21 e0       	ldi	r18, 0x01	; 1
     10a:	30 e0       	ldi	r19, 0x00	; 0
     10c:	02 c0       	rjmp	.+4      	; 0x112 <DIO_SetPinDirection+0xa6>
     10e:	22 0f       	add	r18, r18
     110:	33 1f       	adc	r19, r19
     112:	4a 95       	dec	r20
     114:	e2 f7       	brpl	.-8      	; 0x10e <DIO_SetPinDirection+0xa2>
     116:	26 2b       	or	r18, r22
     118:	fc 01       	movw	r30, r24
     11a:	20 83       	st	Z, r18
		
	}
	/* PORTB */ 
	else if((PinNum>=DIO_PORTB_PIN0) && (PinNum<=DIO_PORTB_PIN7)){
		bit_num = PinNum-DIO_PORTB_PIN0 ;
		if(PinDirection){
     11c:	7f c0       	rjmp	.+254    	; 0x21c <DIO_SetPinDirection+0x1b0>
			Set_Bit(DDR_B,bit_num);
		}
		else{
			Clear_Bit(DDR_B,bit_num);
     11e:	87 e3       	ldi	r24, 0x37	; 55
     120:	90 e0       	ldi	r25, 0x00	; 0
     122:	27 e3       	ldi	r18, 0x37	; 55
     124:	30 e0       	ldi	r19, 0x00	; 0
     126:	f9 01       	movw	r30, r18
     128:	60 81       	ld	r22, Z
     12a:	29 81       	ldd	r18, Y+1	; 0x01
     12c:	42 2f       	mov	r20, r18
     12e:	50 e0       	ldi	r21, 0x00	; 0
     130:	21 e0       	ldi	r18, 0x01	; 1
     132:	30 e0       	ldi	r19, 0x00	; 0
     134:	02 c0       	rjmp	.+4      	; 0x13a <DIO_SetPinDirection+0xce>
     136:	22 0f       	add	r18, r18
     138:	33 1f       	adc	r19, r19
     13a:	4a 95       	dec	r20
     13c:	e2 f7       	brpl	.-8      	; 0x136 <DIO_SetPinDirection+0xca>
     13e:	20 95       	com	r18
     140:	26 23       	and	r18, r22
     142:	fc 01       	movw	r30, r24
     144:	20 83       	st	Z, r18
		
	}
	/* PORTB */ 
	else if((PinNum>=DIO_PORTB_PIN0) && (PinNum<=DIO_PORTB_PIN7)){
		bit_num = PinNum-DIO_PORTB_PIN0 ;
		if(PinDirection){
     146:	6a c0       	rjmp	.+212    	; 0x21c <DIO_SetPinDirection+0x1b0>
		
		
	}
	/* PORTC */ 
	
	else if((PinNum>=DIO_PORTC_PIN0) && (PinNum<=DIO_PORTC_PIN7)){
     148:	8a 81       	ldd	r24, Y+2	; 0x02
     14a:	80 31       	cpi	r24, 0x10	; 16
     14c:	90 f1       	brcs	.+100    	; 0x1b2 <DIO_SetPinDirection+0x146>
     14e:	8a 81       	ldd	r24, Y+2	; 0x02
     150:	88 31       	cpi	r24, 0x18	; 24
     152:	78 f5       	brcc	.+94     	; 0x1b2 <DIO_SetPinDirection+0x146>
		bit_num = PinNum-DIO_PORTC_PIN0 ;
     154:	8a 81       	ldd	r24, Y+2	; 0x02
     156:	80 51       	subi	r24, 0x10	; 16
     158:	89 83       	std	Y+1, r24	; 0x01
		if(PinDirection){
     15a:	8b 81       	ldd	r24, Y+3	; 0x03
     15c:	88 23       	and	r24, r24
     15e:	a1 f0       	breq	.+40     	; 0x188 <DIO_SetPinDirection+0x11c>
			Set_Bit(DDR_C,bit_num);
     160:	84 e3       	ldi	r24, 0x34	; 52
     162:	90 e0       	ldi	r25, 0x00	; 0
     164:	24 e3       	ldi	r18, 0x34	; 52
     166:	30 e0       	ldi	r19, 0x00	; 0
     168:	f9 01       	movw	r30, r18
     16a:	60 81       	ld	r22, Z
     16c:	29 81       	ldd	r18, Y+1	; 0x01
     16e:	42 2f       	mov	r20, r18
     170:	50 e0       	ldi	r21, 0x00	; 0
     172:	21 e0       	ldi	r18, 0x01	; 1
     174:	30 e0       	ldi	r19, 0x00	; 0
     176:	02 c0       	rjmp	.+4      	; 0x17c <DIO_SetPinDirection+0x110>
     178:	22 0f       	add	r18, r18
     17a:	33 1f       	adc	r19, r19
     17c:	4a 95       	dec	r20
     17e:	e2 f7       	brpl	.-8      	; 0x178 <DIO_SetPinDirection+0x10c>
     180:	26 2b       	or	r18, r22
     182:	fc 01       	movw	r30, r24
     184:	20 83       	st	Z, r18
	}
	/* PORTC */ 
	
	else if((PinNum>=DIO_PORTC_PIN0) && (PinNum<=DIO_PORTC_PIN7)){
		bit_num = PinNum-DIO_PORTC_PIN0 ;
		if(PinDirection){
     186:	4a c0       	rjmp	.+148    	; 0x21c <DIO_SetPinDirection+0x1b0>
			Set_Bit(DDR_C,bit_num);
		}
		else{
			Clear_Bit(DDR_C,bit_num);
     188:	84 e3       	ldi	r24, 0x34	; 52
     18a:	90 e0       	ldi	r25, 0x00	; 0
     18c:	24 e3       	ldi	r18, 0x34	; 52
     18e:	30 e0       	ldi	r19, 0x00	; 0
     190:	f9 01       	movw	r30, r18
     192:	60 81       	ld	r22, Z
     194:	29 81       	ldd	r18, Y+1	; 0x01
     196:	42 2f       	mov	r20, r18
     198:	50 e0       	ldi	r21, 0x00	; 0
     19a:	21 e0       	ldi	r18, 0x01	; 1
     19c:	30 e0       	ldi	r19, 0x00	; 0
     19e:	02 c0       	rjmp	.+4      	; 0x1a4 <DIO_SetPinDirection+0x138>
     1a0:	22 0f       	add	r18, r18
     1a2:	33 1f       	adc	r19, r19
     1a4:	4a 95       	dec	r20
     1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <DIO_SetPinDirection+0x134>
     1a8:	20 95       	com	r18
     1aa:	26 23       	and	r18, r22
     1ac:	fc 01       	movw	r30, r24
     1ae:	20 83       	st	Z, r18
	}
	/* PORTC */ 
	
	else if((PinNum>=DIO_PORTC_PIN0) && (PinNum<=DIO_PORTC_PIN7)){
		bit_num = PinNum-DIO_PORTC_PIN0 ;
		if(PinDirection){
     1b0:	35 c0       	rjmp	.+106    	; 0x21c <DIO_SetPinDirection+0x1b0>
		
		
		
	}
	/* PORTD */
	else if((PinNum>=DIO_PORTD_PIN0) && (PinNum<=DIO_PORTD_PIN7)){
     1b2:	8a 81       	ldd	r24, Y+2	; 0x02
     1b4:	88 31       	cpi	r24, 0x18	; 24
     1b6:	90 f1       	brcs	.+100    	; 0x21c <DIO_SetPinDirection+0x1b0>
     1b8:	8a 81       	ldd	r24, Y+2	; 0x02
     1ba:	80 32       	cpi	r24, 0x20	; 32
     1bc:	78 f5       	brcc	.+94     	; 0x21c <DIO_SetPinDirection+0x1b0>
		bit_num = PinNum-DIO_PORTD_PIN0 ;
     1be:	8a 81       	ldd	r24, Y+2	; 0x02
     1c0:	88 51       	subi	r24, 0x18	; 24
     1c2:	89 83       	std	Y+1, r24	; 0x01
		if(PinDirection){
     1c4:	8b 81       	ldd	r24, Y+3	; 0x03
     1c6:	88 23       	and	r24, r24
     1c8:	a1 f0       	breq	.+40     	; 0x1f2 <DIO_SetPinDirection+0x186>
			Set_Bit(DDR_D,bit_num);
     1ca:	81 e3       	ldi	r24, 0x31	; 49
     1cc:	90 e0       	ldi	r25, 0x00	; 0
     1ce:	21 e3       	ldi	r18, 0x31	; 49
     1d0:	30 e0       	ldi	r19, 0x00	; 0
     1d2:	f9 01       	movw	r30, r18
     1d4:	60 81       	ld	r22, Z
     1d6:	29 81       	ldd	r18, Y+1	; 0x01
     1d8:	42 2f       	mov	r20, r18
     1da:	50 e0       	ldi	r21, 0x00	; 0
     1dc:	21 e0       	ldi	r18, 0x01	; 1
     1de:	30 e0       	ldi	r19, 0x00	; 0
     1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <DIO_SetPinDirection+0x17a>
     1e2:	22 0f       	add	r18, r18
     1e4:	33 1f       	adc	r19, r19
     1e6:	4a 95       	dec	r20
     1e8:	e2 f7       	brpl	.-8      	; 0x1e2 <DIO_SetPinDirection+0x176>
     1ea:	26 2b       	or	r18, r22
     1ec:	fc 01       	movw	r30, r24
     1ee:	20 83       	st	Z, r18
			Clear_Bit(DDR_D,bit_num);
			
		}
	}
	
}
     1f0:	15 c0       	rjmp	.+42     	; 0x21c <DIO_SetPinDirection+0x1b0>
		bit_num = PinNum-DIO_PORTD_PIN0 ;
		if(PinDirection){
			Set_Bit(DDR_D,bit_num);
		}
		else{
			Clear_Bit(DDR_D,bit_num);
     1f2:	81 e3       	ldi	r24, 0x31	; 49
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	21 e3       	ldi	r18, 0x31	; 49
     1f8:	30 e0       	ldi	r19, 0x00	; 0
     1fa:	f9 01       	movw	r30, r18
     1fc:	60 81       	ld	r22, Z
     1fe:	29 81       	ldd	r18, Y+1	; 0x01
     200:	42 2f       	mov	r20, r18
     202:	50 e0       	ldi	r21, 0x00	; 0
     204:	21 e0       	ldi	r18, 0x01	; 1
     206:	30 e0       	ldi	r19, 0x00	; 0
     208:	02 c0       	rjmp	.+4      	; 0x20e <DIO_SetPinDirection+0x1a2>
     20a:	22 0f       	add	r18, r18
     20c:	33 1f       	adc	r19, r19
     20e:	4a 95       	dec	r20
     210:	e2 f7       	brpl	.-8      	; 0x20a <DIO_SetPinDirection+0x19e>
     212:	20 95       	com	r18
     214:	26 23       	and	r18, r22
     216:	fc 01       	movw	r30, r24
     218:	20 83       	st	Z, r18
			
		}
	}
	
}
     21a:	00 c0       	rjmp	.+0      	; 0x21c <DIO_SetPinDirection+0x1b0>
     21c:	00 00       	nop
     21e:	0f 90       	pop	r0
     220:	0f 90       	pop	r0
     222:	0f 90       	pop	r0
     224:	df 91       	pop	r29
     226:	cf 91       	pop	r28
     228:	08 95       	ret

0000022a <DIO_WritePin>:
/* Description! Writing in specific pin in DIO ports                                   */
/* Input      ! Pin_num , pin value (High or Low)                                      */
/* Output     ! Nothing                                                                */
/***************************************************************************************/

void DIO_WritePin(uint8 PinNum,uint8 PinValue){
     22a:	cf 93       	push	r28
     22c:	df 93       	push	r29
     22e:	00 d0       	rcall	.+0      	; 0x230 <DIO_WritePin+0x6>
     230:	1f 92       	push	r1
     232:	cd b7       	in	r28, 0x3d	; 61
     234:	de b7       	in	r29, 0x3e	; 62
     236:	8a 83       	std	Y+2, r24	; 0x02
     238:	6b 83       	std	Y+3, r22	; 0x03
	uint8 bit_num ;
	/* PORTA */
	if((PinNum>=DIO_PORTA_PIN0) && (PinNum<=DIO_PORTA_PIN7)){
     23a:	8a 81       	ldd	r24, Y+2	; 0x02
     23c:	88 30       	cpi	r24, 0x08	; 8
     23e:	70 f5       	brcc	.+92     	; 0x29c <DIO_WritePin+0x72>
		bit_num = PinNum ;
     240:	8a 81       	ldd	r24, Y+2	; 0x02
     242:	89 83       	std	Y+1, r24	; 0x01
		if(PinValue){		
     244:	8b 81       	ldd	r24, Y+3	; 0x03
     246:	88 23       	and	r24, r24
     248:	a1 f0       	breq	.+40     	; 0x272 <DIO_WritePin+0x48>
			Set_Bit(PORT_A,bit_num);			
     24a:	8b e3       	ldi	r24, 0x3B	; 59
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	2b e3       	ldi	r18, 0x3B	; 59
     250:	30 e0       	ldi	r19, 0x00	; 0
     252:	f9 01       	movw	r30, r18
     254:	60 81       	ld	r22, Z
     256:	29 81       	ldd	r18, Y+1	; 0x01
     258:	42 2f       	mov	r20, r18
     25a:	50 e0       	ldi	r21, 0x00	; 0
     25c:	21 e0       	ldi	r18, 0x01	; 1
     25e:	30 e0       	ldi	r19, 0x00	; 0
     260:	02 c0       	rjmp	.+4      	; 0x266 <DIO_WritePin+0x3c>
     262:	22 0f       	add	r18, r18
     264:	33 1f       	adc	r19, r19
     266:	4a 95       	dec	r20
     268:	e2 f7       	brpl	.-8      	; 0x262 <DIO_WritePin+0x38>
     26a:	26 2b       	or	r18, r22
     26c:	fc 01       	movw	r30, r24
     26e:	20 83       	st	Z, r18
		else{
			Clear_Bit(PORT_D,bit_num);
			
		}
		}
}
     270:	b4 c0       	rjmp	.+360    	; 0x3da <DIO_WritePin+0x1b0>
		bit_num = PinNum ;
		if(PinValue){		
			Set_Bit(PORT_A,bit_num);			
		}
		else{
			Clear_Bit(PORT_A,bit_num);	
     272:	8b e3       	ldi	r24, 0x3B	; 59
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	2b e3       	ldi	r18, 0x3B	; 59
     278:	30 e0       	ldi	r19, 0x00	; 0
     27a:	f9 01       	movw	r30, r18
     27c:	60 81       	ld	r22, Z
     27e:	29 81       	ldd	r18, Y+1	; 0x01
     280:	42 2f       	mov	r20, r18
     282:	50 e0       	ldi	r21, 0x00	; 0
     284:	21 e0       	ldi	r18, 0x01	; 1
     286:	30 e0       	ldi	r19, 0x00	; 0
     288:	02 c0       	rjmp	.+4      	; 0x28e <DIO_WritePin+0x64>
     28a:	22 0f       	add	r18, r18
     28c:	33 1f       	adc	r19, r19
     28e:	4a 95       	dec	r20
     290:	e2 f7       	brpl	.-8      	; 0x28a <DIO_WritePin+0x60>
     292:	20 95       	com	r18
     294:	26 23       	and	r18, r22
     296:	fc 01       	movw	r30, r24
     298:	20 83       	st	Z, r18
		else{
			Clear_Bit(PORT_D,bit_num);
			
		}
		}
}
     29a:	9f c0       	rjmp	.+318    	; 0x3da <DIO_WritePin+0x1b0>
		else{
			Clear_Bit(PORT_A,bit_num);	
		}
	}
	/* PORTB */
	else if((PinNum>=DIO_PORTB_PIN0) && (PinNum<=DIO_PORTB_PIN7)){
     29c:	8a 81       	ldd	r24, Y+2	; 0x02
     29e:	88 30       	cpi	r24, 0x08	; 8
     2a0:	90 f1       	brcs	.+100    	; 0x306 <DIO_WritePin+0xdc>
     2a2:	8a 81       	ldd	r24, Y+2	; 0x02
     2a4:	80 31       	cpi	r24, 0x10	; 16
     2a6:	78 f5       	brcc	.+94     	; 0x306 <DIO_WritePin+0xdc>
		bit_num = PinNum-DIO_PORTB_PIN0 ;
     2a8:	8a 81       	ldd	r24, Y+2	; 0x02
     2aa:	88 50       	subi	r24, 0x08	; 8
     2ac:	89 83       	std	Y+1, r24	; 0x01
		if(PinValue){
     2ae:	8b 81       	ldd	r24, Y+3	; 0x03
     2b0:	88 23       	and	r24, r24
     2b2:	a1 f0       	breq	.+40     	; 0x2dc <DIO_WritePin+0xb2>
			Set_Bit(PORT_B,bit_num);
     2b4:	88 e3       	ldi	r24, 0x38	; 56
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	28 e3       	ldi	r18, 0x38	; 56
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	f9 01       	movw	r30, r18
     2be:	60 81       	ld	r22, Z
     2c0:	29 81       	ldd	r18, Y+1	; 0x01
     2c2:	42 2f       	mov	r20, r18
     2c4:	50 e0       	ldi	r21, 0x00	; 0
     2c6:	21 e0       	ldi	r18, 0x01	; 1
     2c8:	30 e0       	ldi	r19, 0x00	; 0
     2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <DIO_WritePin+0xa6>
     2cc:	22 0f       	add	r18, r18
     2ce:	33 1f       	adc	r19, r19
     2d0:	4a 95       	dec	r20
     2d2:	e2 f7       	brpl	.-8      	; 0x2cc <DIO_WritePin+0xa2>
     2d4:	26 2b       	or	r18, r22
     2d6:	fc 01       	movw	r30, r24
     2d8:	20 83       	st	Z, r18
		}
	}
	/* PORTB */
	else if((PinNum>=DIO_PORTB_PIN0) && (PinNum<=DIO_PORTB_PIN7)){
		bit_num = PinNum-DIO_PORTB_PIN0 ;
		if(PinValue){
     2da:	7f c0       	rjmp	.+254    	; 0x3da <DIO_WritePin+0x1b0>
			Set_Bit(PORT_B,bit_num);
		}
		else{
			Clear_Bit(PORT_B,bit_num);	
     2dc:	88 e3       	ldi	r24, 0x38	; 56
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	28 e3       	ldi	r18, 0x38	; 56
     2e2:	30 e0       	ldi	r19, 0x00	; 0
     2e4:	f9 01       	movw	r30, r18
     2e6:	60 81       	ld	r22, Z
     2e8:	29 81       	ldd	r18, Y+1	; 0x01
     2ea:	42 2f       	mov	r20, r18
     2ec:	50 e0       	ldi	r21, 0x00	; 0
     2ee:	21 e0       	ldi	r18, 0x01	; 1
     2f0:	30 e0       	ldi	r19, 0x00	; 0
     2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <DIO_WritePin+0xce>
     2f4:	22 0f       	add	r18, r18
     2f6:	33 1f       	adc	r19, r19
     2f8:	4a 95       	dec	r20
     2fa:	e2 f7       	brpl	.-8      	; 0x2f4 <DIO_WritePin+0xca>
     2fc:	20 95       	com	r18
     2fe:	26 23       	and	r18, r22
     300:	fc 01       	movw	r30, r24
     302:	20 83       	st	Z, r18
		}
	}
	/* PORTB */
	else if((PinNum>=DIO_PORTB_PIN0) && (PinNum<=DIO_PORTB_PIN7)){
		bit_num = PinNum-DIO_PORTB_PIN0 ;
		if(PinValue){
     304:	6a c0       	rjmp	.+212    	; 0x3da <DIO_WritePin+0x1b0>
		
		
	}
	/* PORTC */
	
	else if((PinNum>=DIO_PORTC_PIN0) && (PinNum<=DIO_PORTC_PIN7)){
     306:	8a 81       	ldd	r24, Y+2	; 0x02
     308:	80 31       	cpi	r24, 0x10	; 16
     30a:	90 f1       	brcs	.+100    	; 0x370 <DIO_WritePin+0x146>
     30c:	8a 81       	ldd	r24, Y+2	; 0x02
     30e:	88 31       	cpi	r24, 0x18	; 24
     310:	78 f5       	brcc	.+94     	; 0x370 <DIO_WritePin+0x146>
		bit_num = PinNum-DIO_PORTC_PIN0 ;
     312:	8a 81       	ldd	r24, Y+2	; 0x02
     314:	80 51       	subi	r24, 0x10	; 16
     316:	89 83       	std	Y+1, r24	; 0x01
		if(PinValue){
     318:	8b 81       	ldd	r24, Y+3	; 0x03
     31a:	88 23       	and	r24, r24
     31c:	a1 f0       	breq	.+40     	; 0x346 <DIO_WritePin+0x11c>
			Set_Bit(PORT_C,bit_num);
     31e:	85 e3       	ldi	r24, 0x35	; 53
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	25 e3       	ldi	r18, 0x35	; 53
     324:	30 e0       	ldi	r19, 0x00	; 0
     326:	f9 01       	movw	r30, r18
     328:	60 81       	ld	r22, Z
     32a:	29 81       	ldd	r18, Y+1	; 0x01
     32c:	42 2f       	mov	r20, r18
     32e:	50 e0       	ldi	r21, 0x00	; 0
     330:	21 e0       	ldi	r18, 0x01	; 1
     332:	30 e0       	ldi	r19, 0x00	; 0
     334:	02 c0       	rjmp	.+4      	; 0x33a <DIO_WritePin+0x110>
     336:	22 0f       	add	r18, r18
     338:	33 1f       	adc	r19, r19
     33a:	4a 95       	dec	r20
     33c:	e2 f7       	brpl	.-8      	; 0x336 <DIO_WritePin+0x10c>
     33e:	26 2b       	or	r18, r22
     340:	fc 01       	movw	r30, r24
     342:	20 83       	st	Z, r18
	}
	/* PORTC */
	
	else if((PinNum>=DIO_PORTC_PIN0) && (PinNum<=DIO_PORTC_PIN7)){
		bit_num = PinNum-DIO_PORTC_PIN0 ;
		if(PinValue){
     344:	4a c0       	rjmp	.+148    	; 0x3da <DIO_WritePin+0x1b0>
			Set_Bit(PORT_C,bit_num);
		}
		else{
			Clear_Bit(PORT_C,bit_num);
     346:	85 e3       	ldi	r24, 0x35	; 53
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	25 e3       	ldi	r18, 0x35	; 53
     34c:	30 e0       	ldi	r19, 0x00	; 0
     34e:	f9 01       	movw	r30, r18
     350:	60 81       	ld	r22, Z
     352:	29 81       	ldd	r18, Y+1	; 0x01
     354:	42 2f       	mov	r20, r18
     356:	50 e0       	ldi	r21, 0x00	; 0
     358:	21 e0       	ldi	r18, 0x01	; 1
     35a:	30 e0       	ldi	r19, 0x00	; 0
     35c:	02 c0       	rjmp	.+4      	; 0x362 <DIO_WritePin+0x138>
     35e:	22 0f       	add	r18, r18
     360:	33 1f       	adc	r19, r19
     362:	4a 95       	dec	r20
     364:	e2 f7       	brpl	.-8      	; 0x35e <DIO_WritePin+0x134>
     366:	20 95       	com	r18
     368:	26 23       	and	r18, r22
     36a:	fc 01       	movw	r30, r24
     36c:	20 83       	st	Z, r18
	}
	/* PORTC */
	
	else if((PinNum>=DIO_PORTC_PIN0) && (PinNum<=DIO_PORTC_PIN7)){
		bit_num = PinNum-DIO_PORTC_PIN0 ;
		if(PinValue){
     36e:	35 c0       	rjmp	.+106    	; 0x3da <DIO_WritePin+0x1b0>
			
		}
		
	}
	/* PORTD */
	else if((PinNum>=DIO_PORTD_PIN0) && (PinNum<=DIO_PORTD_PIN7)){
     370:	8a 81       	ldd	r24, Y+2	; 0x02
     372:	88 31       	cpi	r24, 0x18	; 24
     374:	90 f1       	brcs	.+100    	; 0x3da <DIO_WritePin+0x1b0>
     376:	8a 81       	ldd	r24, Y+2	; 0x02
     378:	80 32       	cpi	r24, 0x20	; 32
     37a:	78 f5       	brcc	.+94     	; 0x3da <DIO_WritePin+0x1b0>
		bit_num = PinNum-DIO_PORTD_PIN0 ;
     37c:	8a 81       	ldd	r24, Y+2	; 0x02
     37e:	88 51       	subi	r24, 0x18	; 24
     380:	89 83       	std	Y+1, r24	; 0x01
		if(PinValue){
     382:	8b 81       	ldd	r24, Y+3	; 0x03
     384:	88 23       	and	r24, r24
     386:	a1 f0       	breq	.+40     	; 0x3b0 <DIO_WritePin+0x186>
			Set_Bit(PORT_D,bit_num);
     388:	82 e3       	ldi	r24, 0x32	; 50
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	22 e3       	ldi	r18, 0x32	; 50
     38e:	30 e0       	ldi	r19, 0x00	; 0
     390:	f9 01       	movw	r30, r18
     392:	60 81       	ld	r22, Z
     394:	29 81       	ldd	r18, Y+1	; 0x01
     396:	42 2f       	mov	r20, r18
     398:	50 e0       	ldi	r21, 0x00	; 0
     39a:	21 e0       	ldi	r18, 0x01	; 1
     39c:	30 e0       	ldi	r19, 0x00	; 0
     39e:	02 c0       	rjmp	.+4      	; 0x3a4 <DIO_WritePin+0x17a>
     3a0:	22 0f       	add	r18, r18
     3a2:	33 1f       	adc	r19, r19
     3a4:	4a 95       	dec	r20
     3a6:	e2 f7       	brpl	.-8      	; 0x3a0 <DIO_WritePin+0x176>
     3a8:	26 2b       	or	r18, r22
     3aa:	fc 01       	movw	r30, r24
     3ac:	20 83       	st	Z, r18
		else{
			Clear_Bit(PORT_D,bit_num);
			
		}
		}
}
     3ae:	15 c0       	rjmp	.+42     	; 0x3da <DIO_WritePin+0x1b0>
		bit_num = PinNum-DIO_PORTD_PIN0 ;
		if(PinValue){
			Set_Bit(PORT_D,bit_num);
		}
		else{
			Clear_Bit(PORT_D,bit_num);
     3b0:	82 e3       	ldi	r24, 0x32	; 50
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	22 e3       	ldi	r18, 0x32	; 50
     3b6:	30 e0       	ldi	r19, 0x00	; 0
     3b8:	f9 01       	movw	r30, r18
     3ba:	60 81       	ld	r22, Z
     3bc:	29 81       	ldd	r18, Y+1	; 0x01
     3be:	42 2f       	mov	r20, r18
     3c0:	50 e0       	ldi	r21, 0x00	; 0
     3c2:	21 e0       	ldi	r18, 0x01	; 1
     3c4:	30 e0       	ldi	r19, 0x00	; 0
     3c6:	02 c0       	rjmp	.+4      	; 0x3cc <DIO_WritePin+0x1a2>
     3c8:	22 0f       	add	r18, r18
     3ca:	33 1f       	adc	r19, r19
     3cc:	4a 95       	dec	r20
     3ce:	e2 f7       	brpl	.-8      	; 0x3c8 <DIO_WritePin+0x19e>
     3d0:	20 95       	com	r18
     3d2:	26 23       	and	r18, r22
     3d4:	fc 01       	movw	r30, r24
     3d6:	20 83       	st	Z, r18
			
		}
		}
}
     3d8:	00 c0       	rjmp	.+0      	; 0x3da <DIO_WritePin+0x1b0>
     3da:	00 00       	nop
     3dc:	0f 90       	pop	r0
     3de:	0f 90       	pop	r0
     3e0:	0f 90       	pop	r0
     3e2:	df 91       	pop	r29
     3e4:	cf 91       	pop	r28
     3e6:	08 95       	ret

000003e8 <LCD_sendCommand>:
#define  F_CPU  8000000
#include <util/delay.h>
/***************************************************************************************/
/********************************** Function Definition ********************************/
/***************************************************************************************/
void LCD_sendCommand(uint8 LCD_command){
     3e8:	0f 93       	push	r16
     3ea:	1f 93       	push	r17
     3ec:	cf 93       	push	r28
     3ee:	df 93       	push	r29
     3f0:	cd b7       	in	r28, 0x3d	; 61
     3f2:	de b7       	in	r29, 0x3e	; 62
     3f4:	c7 54       	subi	r28, 0x47	; 71
     3f6:	d1 09       	sbc	r29, r1
     3f8:	0f b6       	in	r0, 0x3f	; 63
     3fa:	f8 94       	cli
     3fc:	de bf       	out	0x3e, r29	; 62
     3fe:	0f be       	out	0x3f, r0	; 63
     400:	cd bf       	out	0x3d, r28	; 61
     402:	9e 01       	movw	r18, r28
     404:	29 5b       	subi	r18, 0xB9	; 185
     406:	3f 4f       	sbci	r19, 0xFF	; 255
     408:	f9 01       	movw	r30, r18
     40a:	80 83       	st	Z, r24
     40c:	80 e0       	ldi	r24, 0x00	; 0
     40e:	90 e0       	ldi	r25, 0x00	; 0
     410:	a0 e0       	ldi	r26, 0x00	; 0
     412:	b0 e4       	ldi	r27, 0x40	; 64
     414:	89 83       	std	Y+1, r24	; 0x01
     416:	9a 83       	std	Y+2, r25	; 0x02
     418:	ab 83       	std	Y+3, r26	; 0x03
     41a:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     41c:	20 e0       	ldi	r18, 0x00	; 0
     41e:	30 e0       	ldi	r19, 0x00	; 0
     420:	4a ef       	ldi	r20, 0xFA	; 250
     422:	54 e4       	ldi	r21, 0x44	; 68
     424:	69 81       	ldd	r22, Y+1	; 0x01
     426:	7a 81       	ldd	r23, Y+2	; 0x02
     428:	8b 81       	ldd	r24, Y+3	; 0x03
     42a:	9c 81       	ldd	r25, Y+4	; 0x04
     42c:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <__mulsf3>
     430:	dc 01       	movw	r26, r24
     432:	cb 01       	movw	r24, r22
     434:	9e 01       	movw	r18, r28
     436:	23 5c       	subi	r18, 0xC3	; 195
     438:	3f 4f       	sbci	r19, 0xFF	; 255
     43a:	f9 01       	movw	r30, r18
     43c:	80 83       	st	Z, r24
     43e:	91 83       	std	Z+1, r25	; 0x01
     440:	a2 83       	std	Z+2, r26	; 0x02
     442:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     444:	20 e0       	ldi	r18, 0x00	; 0
     446:	30 e0       	ldi	r19, 0x00	; 0
     448:	40 e8       	ldi	r20, 0x80	; 128
     44a:	5f e3       	ldi	r21, 0x3F	; 63
     44c:	ce 01       	movw	r24, r28
     44e:	cd 96       	adiw	r24, 0x3d	; 61
     450:	fc 01       	movw	r30, r24
     452:	60 81       	ld	r22, Z
     454:	71 81       	ldd	r23, Z+1	; 0x01
     456:	82 81       	ldd	r24, Z+2	; 0x02
     458:	93 81       	ldd	r25, Z+3	; 0x03
     45a:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__cmpsf2>
     45e:	88 23       	and	r24, r24
     460:	4c f4       	brge	.+18     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
		__ticks = 1;
     462:	ce 01       	movw	r24, r28
     464:	8f 5b       	subi	r24, 0xBF	; 191
     466:	9f 4f       	sbci	r25, 0xFF	; 255
     468:	21 e0       	ldi	r18, 0x01	; 1
     46a:	30 e0       	ldi	r19, 0x00	; 0
     46c:	fc 01       	movw	r30, r24
     46e:	31 83       	std	Z+1, r19	; 0x01
     470:	20 83       	st	Z, r18
     472:	67 c0       	rjmp	.+206    	; 0x542 <__LOCK_REGION_LENGTH__+0x142>
	else if (__tmp > 65535)
     474:	20 e0       	ldi	r18, 0x00	; 0
     476:	3f ef       	ldi	r19, 0xFF	; 255
     478:	4f e7       	ldi	r20, 0x7F	; 127
     47a:	57 e4       	ldi	r21, 0x47	; 71
     47c:	ce 01       	movw	r24, r28
     47e:	cd 96       	adiw	r24, 0x3d	; 61
     480:	fc 01       	movw	r30, r24
     482:	60 81       	ld	r22, Z
     484:	71 81       	ldd	r23, Z+1	; 0x01
     486:	82 81       	ldd	r24, Z+2	; 0x02
     488:	93 81       	ldd	r25, Z+3	; 0x03
     48a:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <__gesf2>
     48e:	18 16       	cp	r1, r24
     490:	0c f0       	brlt	.+2      	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
     492:	46 c0       	rjmp	.+140    	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     494:	20 e0       	ldi	r18, 0x00	; 0
     496:	30 e0       	ldi	r19, 0x00	; 0
     498:	40 e2       	ldi	r20, 0x20	; 32
     49a:	51 e4       	ldi	r21, 0x41	; 65
     49c:	69 81       	ldd	r22, Y+1	; 0x01
     49e:	7a 81       	ldd	r23, Y+2	; 0x02
     4a0:	8b 81       	ldd	r24, Y+3	; 0x03
     4a2:	9c 81       	ldd	r25, Y+4	; 0x04
     4a4:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <__mulsf3>
     4a8:	dc 01       	movw	r26, r24
     4aa:	cb 01       	movw	r24, r22
     4ac:	8e 01       	movw	r16, r28
     4ae:	0f 5b       	subi	r16, 0xBF	; 191
     4b0:	1f 4f       	sbci	r17, 0xFF	; 255
     4b2:	bc 01       	movw	r22, r24
     4b4:	cd 01       	movw	r24, r26
     4b6:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__fixunssfsi>
     4ba:	dc 01       	movw	r26, r24
     4bc:	cb 01       	movw	r24, r22
     4be:	f8 01       	movw	r30, r16
     4c0:	91 83       	std	Z+1, r25	; 0x01
     4c2:	80 83       	st	Z, r24
     4c4:	24 c0       	rjmp	.+72     	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
     4c6:	ce 01       	movw	r24, r28
     4c8:	8d 5b       	subi	r24, 0xBD	; 189
     4ca:	9f 4f       	sbci	r25, 0xFF	; 255
     4cc:	28 ec       	ldi	r18, 0xC8	; 200
     4ce:	30 e0       	ldi	r19, 0x00	; 0
     4d0:	fc 01       	movw	r30, r24
     4d2:	31 83       	std	Z+1, r19	; 0x01
     4d4:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     4d6:	ce 01       	movw	r24, r28
     4d8:	8d 5b       	subi	r24, 0xBD	; 189
     4da:	9f 4f       	sbci	r25, 0xFF	; 255
     4dc:	fc 01       	movw	r30, r24
     4de:	80 81       	ld	r24, Z
     4e0:	91 81       	ldd	r25, Z+1	; 0x01
     4e2:	01 97       	sbiw	r24, 0x01	; 1
     4e4:	f1 f7       	brne	.-4      	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
     4e6:	9e 01       	movw	r18, r28
     4e8:	2d 5b       	subi	r18, 0xBD	; 189
     4ea:	3f 4f       	sbci	r19, 0xFF	; 255
     4ec:	f9 01       	movw	r30, r18
     4ee:	91 83       	std	Z+1, r25	; 0x01
     4f0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4f2:	ce 01       	movw	r24, r28
     4f4:	8f 5b       	subi	r24, 0xBF	; 191
     4f6:	9f 4f       	sbci	r25, 0xFF	; 255
     4f8:	9e 01       	movw	r18, r28
     4fa:	2f 5b       	subi	r18, 0xBF	; 191
     4fc:	3f 4f       	sbci	r19, 0xFF	; 255
     4fe:	f9 01       	movw	r30, r18
     500:	20 81       	ld	r18, Z
     502:	31 81       	ldd	r19, Z+1	; 0x01
     504:	21 50       	subi	r18, 0x01	; 1
     506:	31 09       	sbc	r19, r1
     508:	fc 01       	movw	r30, r24
     50a:	31 83       	std	Z+1, r19	; 0x01
     50c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     50e:	ce 01       	movw	r24, r28
     510:	8f 5b       	subi	r24, 0xBF	; 191
     512:	9f 4f       	sbci	r25, 0xFF	; 255
     514:	fc 01       	movw	r30, r24
     516:	80 81       	ld	r24, Z
     518:	91 81       	ldd	r25, Z+1	; 0x01
     51a:	89 2b       	or	r24, r25
     51c:	a1 f6       	brne	.-88     	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
     51e:	2b c0       	rjmp	.+86     	; 0x576 <__LOCK_REGION_LENGTH__+0x176>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     520:	8e 01       	movw	r16, r28
     522:	0f 5b       	subi	r16, 0xBF	; 191
     524:	1f 4f       	sbci	r17, 0xFF	; 255
     526:	ce 01       	movw	r24, r28
     528:	cd 96       	adiw	r24, 0x3d	; 61
     52a:	fc 01       	movw	r30, r24
     52c:	60 81       	ld	r22, Z
     52e:	71 81       	ldd	r23, Z+1	; 0x01
     530:	82 81       	ldd	r24, Z+2	; 0x02
     532:	93 81       	ldd	r25, Z+3	; 0x03
     534:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__fixunssfsi>
     538:	dc 01       	movw	r26, r24
     53a:	cb 01       	movw	r24, r22
     53c:	f8 01       	movw	r30, r16
     53e:	91 83       	std	Z+1, r25	; 0x01
     540:	80 83       	st	Z, r24
     542:	ce 01       	movw	r24, r28
     544:	8b 5b       	subi	r24, 0xBB	; 187
     546:	9f 4f       	sbci	r25, 0xFF	; 255
     548:	9e 01       	movw	r18, r28
     54a:	2f 5b       	subi	r18, 0xBF	; 191
     54c:	3f 4f       	sbci	r19, 0xFF	; 255
     54e:	f9 01       	movw	r30, r18
     550:	20 81       	ld	r18, Z
     552:	31 81       	ldd	r19, Z+1	; 0x01
     554:	fc 01       	movw	r30, r24
     556:	31 83       	std	Z+1, r19	; 0x01
     558:	20 83       	st	Z, r18
     55a:	ce 01       	movw	r24, r28
     55c:	8b 5b       	subi	r24, 0xBB	; 187
     55e:	9f 4f       	sbci	r25, 0xFF	; 255
     560:	fc 01       	movw	r30, r24
     562:	80 81       	ld	r24, Z
     564:	91 81       	ldd	r25, Z+1	; 0x01
     566:	01 97       	sbiw	r24, 0x01	; 1
     568:	f1 f7       	brne	.-4      	; 0x566 <__LOCK_REGION_LENGTH__+0x166>
     56a:	9e 01       	movw	r18, r28
     56c:	2b 5b       	subi	r18, 0xBB	; 187
     56e:	3f 4f       	sbci	r19, 0xFF	; 255
     570:	f9 01       	movw	r30, r18
     572:	91 83       	std	Z+1, r25	; 0x01
     574:	80 83       	st	Z, r24

	    /* delay between  Commands */
		_delay_ms(TWO_MS);
		/* make RS = 0 to send command */
		DIO_WritePin(LCD_RS,Low);
     576:	60 e0       	ldi	r22, 0x00	; 0
     578:	81 e0       	ldi	r24, 0x01	; 1
     57a:	0e 94 15 01 	call	0x22a	; 0x22a <DIO_WritePin>
		/* make RW = 0 to send command */
		DIO_WritePin(LCD_RW,Low);
     57e:	60 e0       	ldi	r22, 0x00	; 0
     580:	82 e0       	ldi	r24, 0x02	; 2
     582:	0e 94 15 01 	call	0x22a	; 0x22a <DIO_WritePin>
		/* Send Highest Nipple First */
		/*LCD_PORT=(LCD_PORT & 0x0f)|(LCD_command & 0xf0);*/
		DIO_WritePin(LCD_D4,((Get_Bit(LCD_command,BitN4))));
     586:	ce 01       	movw	r24, r28
     588:	89 5b       	subi	r24, 0xB9	; 185
     58a:	9f 4f       	sbci	r25, 0xFF	; 255
     58c:	fc 01       	movw	r30, r24
     58e:	80 81       	ld	r24, Z
     590:	82 95       	swap	r24
     592:	8f 70       	andi	r24, 0x0F	; 15
     594:	81 70       	andi	r24, 0x01	; 1
     596:	68 2f       	mov	r22, r24
     598:	84 e0       	ldi	r24, 0x04	; 4
     59a:	0e 94 15 01 	call	0x22a	; 0x22a <DIO_WritePin>
		DIO_WritePin(LCD_D5,((Get_Bit(LCD_command,BitN5))));
     59e:	ce 01       	movw	r24, r28
     5a0:	89 5b       	subi	r24, 0xB9	; 185
     5a2:	9f 4f       	sbci	r25, 0xFF	; 255
     5a4:	fc 01       	movw	r30, r24
     5a6:	80 81       	ld	r24, Z
     5a8:	82 95       	swap	r24
     5aa:	86 95       	lsr	r24
     5ac:	87 70       	andi	r24, 0x07	; 7
     5ae:	81 70       	andi	r24, 0x01	; 1
     5b0:	68 2f       	mov	r22, r24
     5b2:	85 e0       	ldi	r24, 0x05	; 5
     5b4:	0e 94 15 01 	call	0x22a	; 0x22a <DIO_WritePin>
		DIO_WritePin(LCD_D6,((Get_Bit(LCD_command,BitN6))));
     5b8:	ce 01       	movw	r24, r28
     5ba:	89 5b       	subi	r24, 0xB9	; 185
     5bc:	9f 4f       	sbci	r25, 0xFF	; 255
     5be:	fc 01       	movw	r30, r24
     5c0:	80 81       	ld	r24, Z
     5c2:	82 95       	swap	r24
     5c4:	86 95       	lsr	r24
     5c6:	86 95       	lsr	r24
     5c8:	83 70       	andi	r24, 0x03	; 3
     5ca:	81 70       	andi	r24, 0x01	; 1
     5cc:	68 2f       	mov	r22, r24
     5ce:	86 e0       	ldi	r24, 0x06	; 6
     5d0:	0e 94 15 01 	call	0x22a	; 0x22a <DIO_WritePin>
		DIO_WritePin(LCD_D7,((Get_Bit(LCD_command,BitN7))));
     5d4:	ce 01       	movw	r24, r28
     5d6:	89 5b       	subi	r24, 0xB9	; 185
     5d8:	9f 4f       	sbci	r25, 0xFF	; 255
     5da:	fc 01       	movw	r30, r24
     5dc:	80 81       	ld	r24, Z
     5de:	88 1f       	adc	r24, r24
     5e0:	88 27       	eor	r24, r24
     5e2:	88 1f       	adc	r24, r24
     5e4:	68 2f       	mov	r22, r24
     5e6:	87 e0       	ldi	r24, 0x07	; 7
     5e8:	0e 94 15 01 	call	0x22a	; 0x22a <DIO_WritePin>
		
		/* send High to Low Pulse for Enable to send First Nipple */
		DIO_WritePin(LCD_E,High);
     5ec:	61 e0       	ldi	r22, 0x01	; 1
     5ee:	83 e0       	ldi	r24, 0x03	; 3
     5f0:	0e 94 15 01 	call	0x22a	; 0x22a <DIO_WritePin>
     5f4:	80 e0       	ldi	r24, 0x00	; 0
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	a0 e0       	ldi	r26, 0x00	; 0
     5fa:	b0 e4       	ldi	r27, 0x40	; 64
     5fc:	8d 83       	std	Y+5, r24	; 0x05
     5fe:	9e 83       	std	Y+6, r25	; 0x06
     600:	af 83       	std	Y+7, r26	; 0x07
     602:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     604:	20 e0       	ldi	r18, 0x00	; 0
     606:	30 e0       	ldi	r19, 0x00	; 0
     608:	4a ef       	ldi	r20, 0xFA	; 250
     60a:	54 e4       	ldi	r21, 0x44	; 68
     60c:	6d 81       	ldd	r22, Y+5	; 0x05
     60e:	7e 81       	ldd	r23, Y+6	; 0x06
     610:	8f 81       	ldd	r24, Y+7	; 0x07
     612:	98 85       	ldd	r25, Y+8	; 0x08
     614:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <__mulsf3>
     618:	dc 01       	movw	r26, r24
     61a:	cb 01       	movw	r24, r22
     61c:	8b ab       	std	Y+51, r24	; 0x33
     61e:	9c ab       	std	Y+52, r25	; 0x34
     620:	ad ab       	std	Y+53, r26	; 0x35
     622:	be ab       	std	Y+54, r27	; 0x36
	if (__tmp < 1.0)
     624:	20 e0       	ldi	r18, 0x00	; 0
     626:	30 e0       	ldi	r19, 0x00	; 0
     628:	40 e8       	ldi	r20, 0x80	; 128
     62a:	5f e3       	ldi	r21, 0x3F	; 63
     62c:	6b a9       	ldd	r22, Y+51	; 0x33
     62e:	7c a9       	ldd	r23, Y+52	; 0x34
     630:	8d a9       	ldd	r24, Y+53	; 0x35
     632:	9e a9       	ldd	r25, Y+54	; 0x36
     634:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__cmpsf2>
     638:	88 23       	and	r24, r24
     63a:	2c f4       	brge	.+10     	; 0x646 <__LOCK_REGION_LENGTH__+0x246>
		__ticks = 1;
     63c:	81 e0       	ldi	r24, 0x01	; 1
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	98 af       	std	Y+56, r25	; 0x38
     642:	8f ab       	std	Y+55, r24	; 0x37
     644:	3f c0       	rjmp	.+126    	; 0x6c4 <__LOCK_REGION_LENGTH__+0x2c4>
	else if (__tmp > 65535)
     646:	20 e0       	ldi	r18, 0x00	; 0
     648:	3f ef       	ldi	r19, 0xFF	; 255
     64a:	4f e7       	ldi	r20, 0x7F	; 127
     64c:	57 e4       	ldi	r21, 0x47	; 71
     64e:	6b a9       	ldd	r22, Y+51	; 0x33
     650:	7c a9       	ldd	r23, Y+52	; 0x34
     652:	8d a9       	ldd	r24, Y+53	; 0x35
     654:	9e a9       	ldd	r25, Y+54	; 0x36
     656:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <__gesf2>
     65a:	18 16       	cp	r1, r24
     65c:	4c f5       	brge	.+82     	; 0x6b0 <__LOCK_REGION_LENGTH__+0x2b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     65e:	20 e0       	ldi	r18, 0x00	; 0
     660:	30 e0       	ldi	r19, 0x00	; 0
     662:	40 e2       	ldi	r20, 0x20	; 32
     664:	51 e4       	ldi	r21, 0x41	; 65
     666:	6d 81       	ldd	r22, Y+5	; 0x05
     668:	7e 81       	ldd	r23, Y+6	; 0x06
     66a:	8f 81       	ldd	r24, Y+7	; 0x07
     66c:	98 85       	ldd	r25, Y+8	; 0x08
     66e:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <__mulsf3>
     672:	dc 01       	movw	r26, r24
     674:	cb 01       	movw	r24, r22
     676:	bc 01       	movw	r22, r24
     678:	cd 01       	movw	r24, r26
     67a:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__fixunssfsi>
     67e:	dc 01       	movw	r26, r24
     680:	cb 01       	movw	r24, r22
     682:	98 af       	std	Y+56, r25	; 0x38
     684:	8f ab       	std	Y+55, r24	; 0x37
     686:	0f c0       	rjmp	.+30     	; 0x6a6 <__LOCK_REGION_LENGTH__+0x2a6>
     688:	88 ec       	ldi	r24, 0xC8	; 200
     68a:	90 e0       	ldi	r25, 0x00	; 0
     68c:	9a af       	std	Y+58, r25	; 0x3a
     68e:	89 af       	std	Y+57, r24	; 0x39
     690:	89 ad       	ldd	r24, Y+57	; 0x39
     692:	9a ad       	ldd	r25, Y+58	; 0x3a
     694:	01 97       	sbiw	r24, 0x01	; 1
     696:	f1 f7       	brne	.-4      	; 0x694 <__LOCK_REGION_LENGTH__+0x294>
     698:	9a af       	std	Y+58, r25	; 0x3a
     69a:	89 af       	std	Y+57, r24	; 0x39
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     69c:	8f a9       	ldd	r24, Y+55	; 0x37
     69e:	98 ad       	ldd	r25, Y+56	; 0x38
     6a0:	01 97       	sbiw	r24, 0x01	; 1
     6a2:	98 af       	std	Y+56, r25	; 0x38
     6a4:	8f ab       	std	Y+55, r24	; 0x37
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6a6:	8f a9       	ldd	r24, Y+55	; 0x37
     6a8:	98 ad       	ldd	r25, Y+56	; 0x38
     6aa:	89 2b       	or	r24, r25
     6ac:	69 f7       	brne	.-38     	; 0x688 <__LOCK_REGION_LENGTH__+0x288>
     6ae:	14 c0       	rjmp	.+40     	; 0x6d8 <__LOCK_REGION_LENGTH__+0x2d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6b0:	6b a9       	ldd	r22, Y+51	; 0x33
     6b2:	7c a9       	ldd	r23, Y+52	; 0x34
     6b4:	8d a9       	ldd	r24, Y+53	; 0x35
     6b6:	9e a9       	ldd	r25, Y+54	; 0x36
     6b8:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__fixunssfsi>
     6bc:	dc 01       	movw	r26, r24
     6be:	cb 01       	movw	r24, r22
     6c0:	98 af       	std	Y+56, r25	; 0x38
     6c2:	8f ab       	std	Y+55, r24	; 0x37
     6c4:	8f a9       	ldd	r24, Y+55	; 0x37
     6c6:	98 ad       	ldd	r25, Y+56	; 0x38
     6c8:	9c af       	std	Y+60, r25	; 0x3c
     6ca:	8b af       	std	Y+59, r24	; 0x3b
     6cc:	8b ad       	ldd	r24, Y+59	; 0x3b
     6ce:	9c ad       	ldd	r25, Y+60	; 0x3c
     6d0:	01 97       	sbiw	r24, 0x01	; 1
     6d2:	f1 f7       	brne	.-4      	; 0x6d0 <__LOCK_REGION_LENGTH__+0x2d0>
     6d4:	9c af       	std	Y+60, r25	; 0x3c
     6d6:	8b af       	std	Y+59, r24	; 0x3b
		_delay_ms(TWO_MS);
		DIO_WritePin(LCD_E,Low);
     6d8:	60 e0       	ldi	r22, 0x00	; 0
     6da:	83 e0       	ldi	r24, 0x03	; 3
     6dc:	0e 94 15 01 	call	0x22a	; 0x22a <DIO_WritePin>
     6e0:	80 e0       	ldi	r24, 0x00	; 0
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	a0 e0       	ldi	r26, 0x00	; 0
     6e6:	b0 e4       	ldi	r27, 0x40	; 64
     6e8:	89 87       	std	Y+9, r24	; 0x09
     6ea:	9a 87       	std	Y+10, r25	; 0x0a
     6ec:	ab 87       	std	Y+11, r26	; 0x0b
     6ee:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     6f0:	20 e0       	ldi	r18, 0x00	; 0
     6f2:	30 e0       	ldi	r19, 0x00	; 0
     6f4:	4a ef       	ldi	r20, 0xFA	; 250
     6f6:	54 e4       	ldi	r21, 0x44	; 68
     6f8:	69 85       	ldd	r22, Y+9	; 0x09
     6fa:	7a 85       	ldd	r23, Y+10	; 0x0a
     6fc:	8b 85       	ldd	r24, Y+11	; 0x0b
     6fe:	9c 85       	ldd	r25, Y+12	; 0x0c
     700:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <__mulsf3>
     704:	dc 01       	movw	r26, r24
     706:	cb 01       	movw	r24, r22
     708:	89 a7       	std	Y+41, r24	; 0x29
     70a:	9a a7       	std	Y+42, r25	; 0x2a
     70c:	ab a7       	std	Y+43, r26	; 0x2b
     70e:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
     710:	20 e0       	ldi	r18, 0x00	; 0
     712:	30 e0       	ldi	r19, 0x00	; 0
     714:	40 e8       	ldi	r20, 0x80	; 128
     716:	5f e3       	ldi	r21, 0x3F	; 63
     718:	69 a5       	ldd	r22, Y+41	; 0x29
     71a:	7a a5       	ldd	r23, Y+42	; 0x2a
     71c:	8b a5       	ldd	r24, Y+43	; 0x2b
     71e:	9c a5       	ldd	r25, Y+44	; 0x2c
     720:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__cmpsf2>
     724:	88 23       	and	r24, r24
     726:	2c f4       	brge	.+10     	; 0x732 <__LOCK_REGION_LENGTH__+0x332>
		__ticks = 1;
     728:	81 e0       	ldi	r24, 0x01	; 1
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	9e a7       	std	Y+46, r25	; 0x2e
     72e:	8d a7       	std	Y+45, r24	; 0x2d
     730:	3f c0       	rjmp	.+126    	; 0x7b0 <__LOCK_REGION_LENGTH__+0x3b0>
	else if (__tmp > 65535)
     732:	20 e0       	ldi	r18, 0x00	; 0
     734:	3f ef       	ldi	r19, 0xFF	; 255
     736:	4f e7       	ldi	r20, 0x7F	; 127
     738:	57 e4       	ldi	r21, 0x47	; 71
     73a:	69 a5       	ldd	r22, Y+41	; 0x29
     73c:	7a a5       	ldd	r23, Y+42	; 0x2a
     73e:	8b a5       	ldd	r24, Y+43	; 0x2b
     740:	9c a5       	ldd	r25, Y+44	; 0x2c
     742:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <__gesf2>
     746:	18 16       	cp	r1, r24
     748:	4c f5       	brge	.+82     	; 0x79c <__LOCK_REGION_LENGTH__+0x39c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     74a:	20 e0       	ldi	r18, 0x00	; 0
     74c:	30 e0       	ldi	r19, 0x00	; 0
     74e:	40 e2       	ldi	r20, 0x20	; 32
     750:	51 e4       	ldi	r21, 0x41	; 65
     752:	69 85       	ldd	r22, Y+9	; 0x09
     754:	7a 85       	ldd	r23, Y+10	; 0x0a
     756:	8b 85       	ldd	r24, Y+11	; 0x0b
     758:	9c 85       	ldd	r25, Y+12	; 0x0c
     75a:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <__mulsf3>
     75e:	dc 01       	movw	r26, r24
     760:	cb 01       	movw	r24, r22
     762:	bc 01       	movw	r22, r24
     764:	cd 01       	movw	r24, r26
     766:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__fixunssfsi>
     76a:	dc 01       	movw	r26, r24
     76c:	cb 01       	movw	r24, r22
     76e:	9e a7       	std	Y+46, r25	; 0x2e
     770:	8d a7       	std	Y+45, r24	; 0x2d
     772:	0f c0       	rjmp	.+30     	; 0x792 <__LOCK_REGION_LENGTH__+0x392>
     774:	88 ec       	ldi	r24, 0xC8	; 200
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	98 ab       	std	Y+48, r25	; 0x30
     77a:	8f a7       	std	Y+47, r24	; 0x2f
     77c:	8f a5       	ldd	r24, Y+47	; 0x2f
     77e:	98 a9       	ldd	r25, Y+48	; 0x30
     780:	01 97       	sbiw	r24, 0x01	; 1
     782:	f1 f7       	brne	.-4      	; 0x780 <__LOCK_REGION_LENGTH__+0x380>
     784:	98 ab       	std	Y+48, r25	; 0x30
     786:	8f a7       	std	Y+47, r24	; 0x2f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     788:	8d a5       	ldd	r24, Y+45	; 0x2d
     78a:	9e a5       	ldd	r25, Y+46	; 0x2e
     78c:	01 97       	sbiw	r24, 0x01	; 1
     78e:	9e a7       	std	Y+46, r25	; 0x2e
     790:	8d a7       	std	Y+45, r24	; 0x2d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     792:	8d a5       	ldd	r24, Y+45	; 0x2d
     794:	9e a5       	ldd	r25, Y+46	; 0x2e
     796:	89 2b       	or	r24, r25
     798:	69 f7       	brne	.-38     	; 0x774 <__LOCK_REGION_LENGTH__+0x374>
     79a:	14 c0       	rjmp	.+40     	; 0x7c4 <__LOCK_REGION_LENGTH__+0x3c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     79c:	69 a5       	ldd	r22, Y+41	; 0x29
     79e:	7a a5       	ldd	r23, Y+42	; 0x2a
     7a0:	8b a5       	ldd	r24, Y+43	; 0x2b
     7a2:	9c a5       	ldd	r25, Y+44	; 0x2c
     7a4:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__fixunssfsi>
     7a8:	dc 01       	movw	r26, r24
     7aa:	cb 01       	movw	r24, r22
     7ac:	9e a7       	std	Y+46, r25	; 0x2e
     7ae:	8d a7       	std	Y+45, r24	; 0x2d
     7b0:	8d a5       	ldd	r24, Y+45	; 0x2d
     7b2:	9e a5       	ldd	r25, Y+46	; 0x2e
     7b4:	9a ab       	std	Y+50, r25	; 0x32
     7b6:	89 ab       	std	Y+49, r24	; 0x31
     7b8:	89 a9       	ldd	r24, Y+49	; 0x31
     7ba:	9a a9       	ldd	r25, Y+50	; 0x32
     7bc:	01 97       	sbiw	r24, 0x01	; 1
     7be:	f1 f7       	brne	.-4      	; 0x7bc <__LOCK_REGION_LENGTH__+0x3bc>
     7c0:	9a ab       	std	Y+50, r25	; 0x32
     7c2:	89 ab       	std	Y+49, r24	; 0x31
		_delay_ms(TWO_MS);
		/* Send Lowest Nipple Second */
		/*LCD_PORT=(LCD_PORT & 0x0f)|((LCD_command)<<4);*/
		DIO_WritePin(LCD_D4,((Get_Bit(LCD_command,BitN0))));
     7c4:	ce 01       	movw	r24, r28
     7c6:	89 5b       	subi	r24, 0xB9	; 185
     7c8:	9f 4f       	sbci	r25, 0xFF	; 255
     7ca:	fc 01       	movw	r30, r24
     7cc:	80 81       	ld	r24, Z
     7ce:	81 70       	andi	r24, 0x01	; 1
     7d0:	68 2f       	mov	r22, r24
     7d2:	84 e0       	ldi	r24, 0x04	; 4
     7d4:	0e 94 15 01 	call	0x22a	; 0x22a <DIO_WritePin>
		DIO_WritePin(LCD_D5,((Get_Bit(LCD_command,BitN1))));
     7d8:	ce 01       	movw	r24, r28
     7da:	89 5b       	subi	r24, 0xB9	; 185
     7dc:	9f 4f       	sbci	r25, 0xFF	; 255
     7de:	fc 01       	movw	r30, r24
     7e0:	80 81       	ld	r24, Z
     7e2:	86 95       	lsr	r24
     7e4:	81 70       	andi	r24, 0x01	; 1
     7e6:	68 2f       	mov	r22, r24
     7e8:	85 e0       	ldi	r24, 0x05	; 5
     7ea:	0e 94 15 01 	call	0x22a	; 0x22a <DIO_WritePin>
		DIO_WritePin(LCD_D6,((Get_Bit(LCD_command,BitN2))));
     7ee:	ce 01       	movw	r24, r28
     7f0:	89 5b       	subi	r24, 0xB9	; 185
     7f2:	9f 4f       	sbci	r25, 0xFF	; 255
     7f4:	fc 01       	movw	r30, r24
     7f6:	80 81       	ld	r24, Z
     7f8:	86 95       	lsr	r24
     7fa:	86 95       	lsr	r24
     7fc:	81 70       	andi	r24, 0x01	; 1
     7fe:	68 2f       	mov	r22, r24
     800:	86 e0       	ldi	r24, 0x06	; 6
     802:	0e 94 15 01 	call	0x22a	; 0x22a <DIO_WritePin>
		DIO_WritePin(LCD_D7,((Get_Bit(LCD_command,BitN3))));			
     806:	ce 01       	movw	r24, r28
     808:	89 5b       	subi	r24, 0xB9	; 185
     80a:	9f 4f       	sbci	r25, 0xFF	; 255
     80c:	fc 01       	movw	r30, r24
     80e:	80 81       	ld	r24, Z
     810:	86 95       	lsr	r24
     812:	86 95       	lsr	r24
     814:	86 95       	lsr	r24
     816:	81 70       	andi	r24, 0x01	; 1
     818:	68 2f       	mov	r22, r24
     81a:	87 e0       	ldi	r24, 0x07	; 7
     81c:	0e 94 15 01 	call	0x22a	; 0x22a <DIO_WritePin>
		/* send High to Low Pulse for Enable to send Second Nipple */
		DIO_WritePin(LCD_E,High);
     820:	61 e0       	ldi	r22, 0x01	; 1
     822:	83 e0       	ldi	r24, 0x03	; 3
     824:	0e 94 15 01 	call	0x22a	; 0x22a <DIO_WritePin>
     828:	80 e0       	ldi	r24, 0x00	; 0
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	a0 e0       	ldi	r26, 0x00	; 0
     82e:	b0 e4       	ldi	r27, 0x40	; 64
     830:	8d 87       	std	Y+13, r24	; 0x0d
     832:	9e 87       	std	Y+14, r25	; 0x0e
     834:	af 87       	std	Y+15, r26	; 0x0f
     836:	b8 8b       	std	Y+16, r27	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     838:	20 e0       	ldi	r18, 0x00	; 0
     83a:	30 e0       	ldi	r19, 0x00	; 0
     83c:	4a ef       	ldi	r20, 0xFA	; 250
     83e:	54 e4       	ldi	r21, 0x44	; 68
     840:	6d 85       	ldd	r22, Y+13	; 0x0d
     842:	7e 85       	ldd	r23, Y+14	; 0x0e
     844:	8f 85       	ldd	r24, Y+15	; 0x0f
     846:	98 89       	ldd	r25, Y+16	; 0x10
     848:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <__mulsf3>
     84c:	dc 01       	movw	r26, r24
     84e:	cb 01       	movw	r24, r22
     850:	8f 8f       	std	Y+31, r24	; 0x1f
     852:	98 a3       	std	Y+32, r25	; 0x20
     854:	a9 a3       	std	Y+33, r26	; 0x21
     856:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
     858:	20 e0       	ldi	r18, 0x00	; 0
     85a:	30 e0       	ldi	r19, 0x00	; 0
     85c:	40 e8       	ldi	r20, 0x80	; 128
     85e:	5f e3       	ldi	r21, 0x3F	; 63
     860:	6f 8d       	ldd	r22, Y+31	; 0x1f
     862:	78 a1       	ldd	r23, Y+32	; 0x20
     864:	89 a1       	ldd	r24, Y+33	; 0x21
     866:	9a a1       	ldd	r25, Y+34	; 0x22
     868:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__cmpsf2>
     86c:	88 23       	and	r24, r24
     86e:	2c f4       	brge	.+10     	; 0x87a <__stack+0x1b>
		__ticks = 1;
     870:	81 e0       	ldi	r24, 0x01	; 1
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	9c a3       	std	Y+36, r25	; 0x24
     876:	8b a3       	std	Y+35, r24	; 0x23
     878:	3f c0       	rjmp	.+126    	; 0x8f8 <__stack+0x99>
	else if (__tmp > 65535)
     87a:	20 e0       	ldi	r18, 0x00	; 0
     87c:	3f ef       	ldi	r19, 0xFF	; 255
     87e:	4f e7       	ldi	r20, 0x7F	; 127
     880:	57 e4       	ldi	r21, 0x47	; 71
     882:	6f 8d       	ldd	r22, Y+31	; 0x1f
     884:	78 a1       	ldd	r23, Y+32	; 0x20
     886:	89 a1       	ldd	r24, Y+33	; 0x21
     888:	9a a1       	ldd	r25, Y+34	; 0x22
     88a:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <__gesf2>
     88e:	18 16       	cp	r1, r24
     890:	4c f5       	brge	.+82     	; 0x8e4 <__stack+0x85>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     892:	20 e0       	ldi	r18, 0x00	; 0
     894:	30 e0       	ldi	r19, 0x00	; 0
     896:	40 e2       	ldi	r20, 0x20	; 32
     898:	51 e4       	ldi	r21, 0x41	; 65
     89a:	6d 85       	ldd	r22, Y+13	; 0x0d
     89c:	7e 85       	ldd	r23, Y+14	; 0x0e
     89e:	8f 85       	ldd	r24, Y+15	; 0x0f
     8a0:	98 89       	ldd	r25, Y+16	; 0x10
     8a2:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <__mulsf3>
     8a6:	dc 01       	movw	r26, r24
     8a8:	cb 01       	movw	r24, r22
     8aa:	bc 01       	movw	r22, r24
     8ac:	cd 01       	movw	r24, r26
     8ae:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__fixunssfsi>
     8b2:	dc 01       	movw	r26, r24
     8b4:	cb 01       	movw	r24, r22
     8b6:	9c a3       	std	Y+36, r25	; 0x24
     8b8:	8b a3       	std	Y+35, r24	; 0x23
     8ba:	0f c0       	rjmp	.+30     	; 0x8da <__stack+0x7b>
     8bc:	88 ec       	ldi	r24, 0xC8	; 200
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	9e a3       	std	Y+38, r25	; 0x26
     8c2:	8d a3       	std	Y+37, r24	; 0x25
     8c4:	8d a1       	ldd	r24, Y+37	; 0x25
     8c6:	9e a1       	ldd	r25, Y+38	; 0x26
     8c8:	01 97       	sbiw	r24, 0x01	; 1
     8ca:	f1 f7       	brne	.-4      	; 0x8c8 <__stack+0x69>
     8cc:	9e a3       	std	Y+38, r25	; 0x26
     8ce:	8d a3       	std	Y+37, r24	; 0x25
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8d0:	8b a1       	ldd	r24, Y+35	; 0x23
     8d2:	9c a1       	ldd	r25, Y+36	; 0x24
     8d4:	01 97       	sbiw	r24, 0x01	; 1
     8d6:	9c a3       	std	Y+36, r25	; 0x24
     8d8:	8b a3       	std	Y+35, r24	; 0x23
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8da:	8b a1       	ldd	r24, Y+35	; 0x23
     8dc:	9c a1       	ldd	r25, Y+36	; 0x24
     8de:	89 2b       	or	r24, r25
     8e0:	69 f7       	brne	.-38     	; 0x8bc <__stack+0x5d>
     8e2:	14 c0       	rjmp	.+40     	; 0x90c <__stack+0xad>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8e4:	6f 8d       	ldd	r22, Y+31	; 0x1f
     8e6:	78 a1       	ldd	r23, Y+32	; 0x20
     8e8:	89 a1       	ldd	r24, Y+33	; 0x21
     8ea:	9a a1       	ldd	r25, Y+34	; 0x22
     8ec:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__fixunssfsi>
     8f0:	dc 01       	movw	r26, r24
     8f2:	cb 01       	movw	r24, r22
     8f4:	9c a3       	std	Y+36, r25	; 0x24
     8f6:	8b a3       	std	Y+35, r24	; 0x23
     8f8:	8b a1       	ldd	r24, Y+35	; 0x23
     8fa:	9c a1       	ldd	r25, Y+36	; 0x24
     8fc:	98 a7       	std	Y+40, r25	; 0x28
     8fe:	8f a3       	std	Y+39, r24	; 0x27
     900:	8f a1       	ldd	r24, Y+39	; 0x27
     902:	98 a5       	ldd	r25, Y+40	; 0x28
     904:	01 97       	sbiw	r24, 0x01	; 1
     906:	f1 f7       	brne	.-4      	; 0x904 <__stack+0xa5>
     908:	98 a7       	std	Y+40, r25	; 0x28
     90a:	8f a3       	std	Y+39, r24	; 0x27
		_delay_ms(TWO_MS);
		DIO_WritePin(LCD_E,Low);
     90c:	60 e0       	ldi	r22, 0x00	; 0
     90e:	83 e0       	ldi	r24, 0x03	; 3
     910:	0e 94 15 01 	call	0x22a	; 0x22a <DIO_WritePin>
     914:	80 e0       	ldi	r24, 0x00	; 0
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	a0 e0       	ldi	r26, 0x00	; 0
     91a:	b0 e4       	ldi	r27, 0x40	; 64
     91c:	89 8b       	std	Y+17, r24	; 0x11
     91e:	9a 8b       	std	Y+18, r25	; 0x12
     920:	ab 8b       	std	Y+19, r26	; 0x13
     922:	bc 8b       	std	Y+20, r27	; 0x14

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     924:	20 e0       	ldi	r18, 0x00	; 0
     926:	30 e0       	ldi	r19, 0x00	; 0
     928:	4a ef       	ldi	r20, 0xFA	; 250
     92a:	54 e4       	ldi	r21, 0x44	; 68
     92c:	69 89       	ldd	r22, Y+17	; 0x11
     92e:	7a 89       	ldd	r23, Y+18	; 0x12
     930:	8b 89       	ldd	r24, Y+19	; 0x13
     932:	9c 89       	ldd	r25, Y+20	; 0x14
     934:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <__mulsf3>
     938:	dc 01       	movw	r26, r24
     93a:	cb 01       	movw	r24, r22
     93c:	8d 8b       	std	Y+21, r24	; 0x15
     93e:	9e 8b       	std	Y+22, r25	; 0x16
     940:	af 8b       	std	Y+23, r26	; 0x17
     942:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     944:	20 e0       	ldi	r18, 0x00	; 0
     946:	30 e0       	ldi	r19, 0x00	; 0
     948:	40 e8       	ldi	r20, 0x80	; 128
     94a:	5f e3       	ldi	r21, 0x3F	; 63
     94c:	6d 89       	ldd	r22, Y+21	; 0x15
     94e:	7e 89       	ldd	r23, Y+22	; 0x16
     950:	8f 89       	ldd	r24, Y+23	; 0x17
     952:	98 8d       	ldd	r25, Y+24	; 0x18
     954:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__cmpsf2>
     958:	88 23       	and	r24, r24
     95a:	2c f4       	brge	.+10     	; 0x966 <__stack+0x107>
		__ticks = 1;
     95c:	81 e0       	ldi	r24, 0x01	; 1
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	9a 8f       	std	Y+26, r25	; 0x1a
     962:	89 8f       	std	Y+25, r24	; 0x19
     964:	3f c0       	rjmp	.+126    	; 0x9e4 <__stack+0x185>
	else if (__tmp > 65535)
     966:	20 e0       	ldi	r18, 0x00	; 0
     968:	3f ef       	ldi	r19, 0xFF	; 255
     96a:	4f e7       	ldi	r20, 0x7F	; 127
     96c:	57 e4       	ldi	r21, 0x47	; 71
     96e:	6d 89       	ldd	r22, Y+21	; 0x15
     970:	7e 89       	ldd	r23, Y+22	; 0x16
     972:	8f 89       	ldd	r24, Y+23	; 0x17
     974:	98 8d       	ldd	r25, Y+24	; 0x18
     976:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <__gesf2>
     97a:	18 16       	cp	r1, r24
     97c:	4c f5       	brge	.+82     	; 0x9d0 <__stack+0x171>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     97e:	20 e0       	ldi	r18, 0x00	; 0
     980:	30 e0       	ldi	r19, 0x00	; 0
     982:	40 e2       	ldi	r20, 0x20	; 32
     984:	51 e4       	ldi	r21, 0x41	; 65
     986:	69 89       	ldd	r22, Y+17	; 0x11
     988:	7a 89       	ldd	r23, Y+18	; 0x12
     98a:	8b 89       	ldd	r24, Y+19	; 0x13
     98c:	9c 89       	ldd	r25, Y+20	; 0x14
     98e:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <__mulsf3>
     992:	dc 01       	movw	r26, r24
     994:	cb 01       	movw	r24, r22
     996:	bc 01       	movw	r22, r24
     998:	cd 01       	movw	r24, r26
     99a:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__fixunssfsi>
     99e:	dc 01       	movw	r26, r24
     9a0:	cb 01       	movw	r24, r22
     9a2:	9a 8f       	std	Y+26, r25	; 0x1a
     9a4:	89 8f       	std	Y+25, r24	; 0x19
     9a6:	0f c0       	rjmp	.+30     	; 0x9c6 <__stack+0x167>
     9a8:	88 ec       	ldi	r24, 0xC8	; 200
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	9c 8f       	std	Y+28, r25	; 0x1c
     9ae:	8b 8f       	std	Y+27, r24	; 0x1b
     9b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     9b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
     9b4:	01 97       	sbiw	r24, 0x01	; 1
     9b6:	f1 f7       	brne	.-4      	; 0x9b4 <__stack+0x155>
     9b8:	9c 8f       	std	Y+28, r25	; 0x1c
     9ba:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9bc:	89 8d       	ldd	r24, Y+25	; 0x19
     9be:	9a 8d       	ldd	r25, Y+26	; 0x1a
     9c0:	01 97       	sbiw	r24, 0x01	; 1
     9c2:	9a 8f       	std	Y+26, r25	; 0x1a
     9c4:	89 8f       	std	Y+25, r24	; 0x19
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9c6:	89 8d       	ldd	r24, Y+25	; 0x19
     9c8:	9a 8d       	ldd	r25, Y+26	; 0x1a
     9ca:	89 2b       	or	r24, r25
     9cc:	69 f7       	brne	.-38     	; 0x9a8 <__stack+0x149>
		_delay_ms(TWO_MS);
			
		
		
}
     9ce:	14 c0       	rjmp	.+40     	; 0x9f8 <__stack+0x199>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9d0:	6d 89       	ldd	r22, Y+21	; 0x15
     9d2:	7e 89       	ldd	r23, Y+22	; 0x16
     9d4:	8f 89       	ldd	r24, Y+23	; 0x17
     9d6:	98 8d       	ldd	r25, Y+24	; 0x18
     9d8:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__fixunssfsi>
     9dc:	dc 01       	movw	r26, r24
     9de:	cb 01       	movw	r24, r22
     9e0:	9a 8f       	std	Y+26, r25	; 0x1a
     9e2:	89 8f       	std	Y+25, r24	; 0x19
     9e4:	89 8d       	ldd	r24, Y+25	; 0x19
     9e6:	9a 8d       	ldd	r25, Y+26	; 0x1a
     9e8:	9e 8f       	std	Y+30, r25	; 0x1e
     9ea:	8d 8f       	std	Y+29, r24	; 0x1d
     9ec:	8d 8d       	ldd	r24, Y+29	; 0x1d
     9ee:	9e 8d       	ldd	r25, Y+30	; 0x1e
     9f0:	01 97       	sbiw	r24, 0x01	; 1
     9f2:	f1 f7       	brne	.-4      	; 0x9f0 <__stack+0x191>
     9f4:	9e 8f       	std	Y+30, r25	; 0x1e
     9f6:	8d 8f       	std	Y+29, r24	; 0x1d
     9f8:	00 00       	nop
     9fa:	c9 5b       	subi	r28, 0xB9	; 185
     9fc:	df 4f       	sbci	r29, 0xFF	; 255
     9fe:	0f b6       	in	r0, 0x3f	; 63
     a00:	f8 94       	cli
     a02:	de bf       	out	0x3e, r29	; 62
     a04:	0f be       	out	0x3f, r0	; 63
     a06:	cd bf       	out	0x3d, r28	; 61
     a08:	df 91       	pop	r29
     a0a:	cf 91       	pop	r28
     a0c:	1f 91       	pop	r17
     a0e:	0f 91       	pop	r16
     a10:	08 95       	ret

00000a12 <LCD_init>:

void LCD_init(void){
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	cf 93       	push	r28
     a18:	df 93       	push	r29
     a1a:	cd b7       	in	r28, 0x3d	; 61
     a1c:	de b7       	in	r29, 0x3e	; 62
     a1e:	c2 56       	subi	r28, 0x62	; 98
     a20:	d1 09       	sbc	r29, r1
     a22:	0f b6       	in	r0, 0x3f	; 63
     a24:	f8 94       	cli
     a26:	de bf       	out	0x3e, r29	; 62
     a28:	0f be       	out	0x3f, r0	; 63
     a2a:	cd bf       	out	0x3d, r28	; 61
	/* make Directions of pins as output */
	DIO_SetPinDirection(LCD_RS,output);
     a2c:	61 e0       	ldi	r22, 0x01	; 1
     a2e:	81 e0       	ldi	r24, 0x01	; 1
     a30:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_RW,output);
     a34:	61 e0       	ldi	r22, 0x01	; 1
     a36:	82 e0       	ldi	r24, 0x02	; 2
     a38:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_E,output);
     a3c:	61 e0       	ldi	r22, 0x01	; 1
     a3e:	83 e0       	ldi	r24, 0x03	; 3
     a40:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_D4,output);
     a44:	61 e0       	ldi	r22, 0x01	; 1
     a46:	84 e0       	ldi	r24, 0x04	; 4
     a48:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_D5,output);
     a4c:	61 e0       	ldi	r22, 0x01	; 1
     a4e:	85 e0       	ldi	r24, 0x05	; 5
     a50:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_D6,output);
     a54:	61 e0       	ldi	r22, 0x01	; 1
     a56:	86 e0       	ldi	r24, 0x06	; 6
     a58:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_D7,output);
     a5c:	61 e0       	ldi	r22, 0x01	; 1
     a5e:	87 e0       	ldi	r24, 0x07	; 7
     a60:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinDirection>
     a64:	80 e0       	ldi	r24, 0x00	; 0
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	a0 e7       	ldi	r26, 0x70	; 112
     a6a:	b1 e4       	ldi	r27, 0x41	; 65
     a6c:	89 83       	std	Y+1, r24	; 0x01
     a6e:	9a 83       	std	Y+2, r25	; 0x02
     a70:	ab 83       	std	Y+3, r26	; 0x03
     a72:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     a74:	8e 01       	movw	r16, r28
     a76:	07 5a       	subi	r16, 0xA7	; 167
     a78:	1f 4f       	sbci	r17, 0xFF	; 255
     a7a:	20 e0       	ldi	r18, 0x00	; 0
     a7c:	30 e0       	ldi	r19, 0x00	; 0
     a7e:	4a ef       	ldi	r20, 0xFA	; 250
     a80:	54 e4       	ldi	r21, 0x44	; 68
     a82:	69 81       	ldd	r22, Y+1	; 0x01
     a84:	7a 81       	ldd	r23, Y+2	; 0x02
     a86:	8b 81       	ldd	r24, Y+3	; 0x03
     a88:	9c 81       	ldd	r25, Y+4	; 0x04
     a8a:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <__mulsf3>
     a8e:	dc 01       	movw	r26, r24
     a90:	cb 01       	movw	r24, r22
     a92:	f8 01       	movw	r30, r16
     a94:	80 83       	st	Z, r24
     a96:	91 83       	std	Z+1, r25	; 0x01
     a98:	a2 83       	std	Z+2, r26	; 0x02
     a9a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     a9c:	ce 01       	movw	r24, r28
     a9e:	87 5a       	subi	r24, 0xA7	; 167
     aa0:	9f 4f       	sbci	r25, 0xFF	; 255
     aa2:	20 e0       	ldi	r18, 0x00	; 0
     aa4:	30 e0       	ldi	r19, 0x00	; 0
     aa6:	40 e8       	ldi	r20, 0x80	; 128
     aa8:	5f e3       	ldi	r21, 0x3F	; 63
     aaa:	fc 01       	movw	r30, r24
     aac:	60 81       	ld	r22, Z
     aae:	71 81       	ldd	r23, Z+1	; 0x01
     ab0:	82 81       	ldd	r24, Z+2	; 0x02
     ab2:	93 81       	ldd	r25, Z+3	; 0x03
     ab4:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__cmpsf2>
     ab8:	88 23       	and	r24, r24
     aba:	4c f4       	brge	.+18     	; 0xace <LCD_init+0xbc>
		__ticks = 1;
     abc:	ce 01       	movw	r24, r28
     abe:	83 5a       	subi	r24, 0xA3	; 163
     ac0:	9f 4f       	sbci	r25, 0xFF	; 255
     ac2:	21 e0       	ldi	r18, 0x01	; 1
     ac4:	30 e0       	ldi	r19, 0x00	; 0
     ac6:	fc 01       	movw	r30, r24
     ac8:	31 83       	std	Z+1, r19	; 0x01
     aca:	20 83       	st	Z, r18
     acc:	69 c0       	rjmp	.+210    	; 0xba0 <LCD_init+0x18e>
	else if (__tmp > 65535)
     ace:	ce 01       	movw	r24, r28
     ad0:	87 5a       	subi	r24, 0xA7	; 167
     ad2:	9f 4f       	sbci	r25, 0xFF	; 255
     ad4:	20 e0       	ldi	r18, 0x00	; 0
     ad6:	3f ef       	ldi	r19, 0xFF	; 255
     ad8:	4f e7       	ldi	r20, 0x7F	; 127
     ada:	57 e4       	ldi	r21, 0x47	; 71
     adc:	fc 01       	movw	r30, r24
     ade:	60 81       	ld	r22, Z
     ae0:	71 81       	ldd	r23, Z+1	; 0x01
     ae2:	82 81       	ldd	r24, Z+2	; 0x02
     ae4:	93 81       	ldd	r25, Z+3	; 0x03
     ae6:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <__gesf2>
     aea:	18 16       	cp	r1, r24
     aec:	0c f0       	brlt	.+2      	; 0xaf0 <LCD_init+0xde>
     aee:	46 c0       	rjmp	.+140    	; 0xb7c <LCD_init+0x16a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     af0:	20 e0       	ldi	r18, 0x00	; 0
     af2:	30 e0       	ldi	r19, 0x00	; 0
     af4:	40 e2       	ldi	r20, 0x20	; 32
     af6:	51 e4       	ldi	r21, 0x41	; 65
     af8:	69 81       	ldd	r22, Y+1	; 0x01
     afa:	7a 81       	ldd	r23, Y+2	; 0x02
     afc:	8b 81       	ldd	r24, Y+3	; 0x03
     afe:	9c 81       	ldd	r25, Y+4	; 0x04
     b00:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <__mulsf3>
     b04:	dc 01       	movw	r26, r24
     b06:	cb 01       	movw	r24, r22
     b08:	8e 01       	movw	r16, r28
     b0a:	03 5a       	subi	r16, 0xA3	; 163
     b0c:	1f 4f       	sbci	r17, 0xFF	; 255
     b0e:	bc 01       	movw	r22, r24
     b10:	cd 01       	movw	r24, r26
     b12:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__fixunssfsi>
     b16:	dc 01       	movw	r26, r24
     b18:	cb 01       	movw	r24, r22
     b1a:	f8 01       	movw	r30, r16
     b1c:	91 83       	std	Z+1, r25	; 0x01
     b1e:	80 83       	st	Z, r24
     b20:	24 c0       	rjmp	.+72     	; 0xb6a <LCD_init+0x158>
     b22:	ce 01       	movw	r24, r28
     b24:	81 5a       	subi	r24, 0xA1	; 161
     b26:	9f 4f       	sbci	r25, 0xFF	; 255
     b28:	28 ec       	ldi	r18, 0xC8	; 200
     b2a:	30 e0       	ldi	r19, 0x00	; 0
     b2c:	fc 01       	movw	r30, r24
     b2e:	31 83       	std	Z+1, r19	; 0x01
     b30:	20 83       	st	Z, r18
     b32:	ce 01       	movw	r24, r28
     b34:	81 5a       	subi	r24, 0xA1	; 161
     b36:	9f 4f       	sbci	r25, 0xFF	; 255
     b38:	fc 01       	movw	r30, r24
     b3a:	80 81       	ld	r24, Z
     b3c:	91 81       	ldd	r25, Z+1	; 0x01
     b3e:	01 97       	sbiw	r24, 0x01	; 1
     b40:	f1 f7       	brne	.-4      	; 0xb3e <LCD_init+0x12c>
     b42:	9e 01       	movw	r18, r28
     b44:	21 5a       	subi	r18, 0xA1	; 161
     b46:	3f 4f       	sbci	r19, 0xFF	; 255
     b48:	f9 01       	movw	r30, r18
     b4a:	91 83       	std	Z+1, r25	; 0x01
     b4c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b4e:	ce 01       	movw	r24, r28
     b50:	83 5a       	subi	r24, 0xA3	; 163
     b52:	9f 4f       	sbci	r25, 0xFF	; 255
     b54:	9e 01       	movw	r18, r28
     b56:	23 5a       	subi	r18, 0xA3	; 163
     b58:	3f 4f       	sbci	r19, 0xFF	; 255
     b5a:	f9 01       	movw	r30, r18
     b5c:	20 81       	ld	r18, Z
     b5e:	31 81       	ldd	r19, Z+1	; 0x01
     b60:	21 50       	subi	r18, 0x01	; 1
     b62:	31 09       	sbc	r19, r1
     b64:	fc 01       	movw	r30, r24
     b66:	31 83       	std	Z+1, r19	; 0x01
     b68:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b6a:	ce 01       	movw	r24, r28
     b6c:	83 5a       	subi	r24, 0xA3	; 163
     b6e:	9f 4f       	sbci	r25, 0xFF	; 255
     b70:	fc 01       	movw	r30, r24
     b72:	80 81       	ld	r24, Z
     b74:	91 81       	ldd	r25, Z+1	; 0x01
     b76:	89 2b       	or	r24, r25
     b78:	a1 f6       	brne	.-88     	; 0xb22 <LCD_init+0x110>
     b7a:	2c c0       	rjmp	.+88     	; 0xbd4 <LCD_init+0x1c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b7c:	8e 01       	movw	r16, r28
     b7e:	03 5a       	subi	r16, 0xA3	; 163
     b80:	1f 4f       	sbci	r17, 0xFF	; 255
     b82:	ce 01       	movw	r24, r28
     b84:	87 5a       	subi	r24, 0xA7	; 167
     b86:	9f 4f       	sbci	r25, 0xFF	; 255
     b88:	fc 01       	movw	r30, r24
     b8a:	60 81       	ld	r22, Z
     b8c:	71 81       	ldd	r23, Z+1	; 0x01
     b8e:	82 81       	ldd	r24, Z+2	; 0x02
     b90:	93 81       	ldd	r25, Z+3	; 0x03
     b92:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__fixunssfsi>
     b96:	dc 01       	movw	r26, r24
     b98:	cb 01       	movw	r24, r22
     b9a:	f8 01       	movw	r30, r16
     b9c:	91 83       	std	Z+1, r25	; 0x01
     b9e:	80 83       	st	Z, r24
     ba0:	ce 01       	movw	r24, r28
     ba2:	8f 59       	subi	r24, 0x9F	; 159
     ba4:	9f 4f       	sbci	r25, 0xFF	; 255
     ba6:	9e 01       	movw	r18, r28
     ba8:	23 5a       	subi	r18, 0xA3	; 163
     baa:	3f 4f       	sbci	r19, 0xFF	; 255
     bac:	f9 01       	movw	r30, r18
     bae:	20 81       	ld	r18, Z
     bb0:	31 81       	ldd	r19, Z+1	; 0x01
     bb2:	fc 01       	movw	r30, r24
     bb4:	31 83       	std	Z+1, r19	; 0x01
     bb6:	20 83       	st	Z, r18
     bb8:	ce 01       	movw	r24, r28
     bba:	8f 59       	subi	r24, 0x9F	; 159
     bbc:	9f 4f       	sbci	r25, 0xFF	; 255
     bbe:	fc 01       	movw	r30, r24
     bc0:	80 81       	ld	r24, Z
     bc2:	91 81       	ldd	r25, Z+1	; 0x01
     bc4:	01 97       	sbiw	r24, 0x01	; 1
     bc6:	f1 f7       	brne	.-4      	; 0xbc4 <LCD_init+0x1b2>
     bc8:	9e 01       	movw	r18, r28
     bca:	2f 59       	subi	r18, 0x9F	; 159
     bcc:	3f 4f       	sbci	r19, 0xFF	; 255
     bce:	f9 01       	movw	r30, r18
     bd0:	91 83       	std	Z+1, r25	; 0x01
     bd2:	80 83       	st	Z, r24
   /* Wait 15ms for power up */
   _delay_ms(FIFTEEN_MS);
   /* Initialize LCD with 4bits */
   LCD_sendCommand(LCD_4BIT_1);
     bd4:	83 e3       	ldi	r24, 0x33	; 51
     bd6:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <LCD_sendCommand>
     bda:	80 e0       	ldi	r24, 0x00	; 0
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	a0 e8       	ldi	r26, 0x80	; 128
     be0:	bf e3       	ldi	r27, 0x3F	; 63
     be2:	8d 83       	std	Y+5, r24	; 0x05
     be4:	9e 83       	std	Y+6, r25	; 0x06
     be6:	af 83       	std	Y+7, r26	; 0x07
     be8:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     bea:	8e 01       	movw	r16, r28
     bec:	01 5b       	subi	r16, 0xB1	; 177
     bee:	1f 4f       	sbci	r17, 0xFF	; 255
     bf0:	20 e0       	ldi	r18, 0x00	; 0
     bf2:	30 e0       	ldi	r19, 0x00	; 0
     bf4:	4a ef       	ldi	r20, 0xFA	; 250
     bf6:	54 e4       	ldi	r21, 0x44	; 68
     bf8:	6d 81       	ldd	r22, Y+5	; 0x05
     bfa:	7e 81       	ldd	r23, Y+6	; 0x06
     bfc:	8f 81       	ldd	r24, Y+7	; 0x07
     bfe:	98 85       	ldd	r25, Y+8	; 0x08
     c00:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <__mulsf3>
     c04:	dc 01       	movw	r26, r24
     c06:	cb 01       	movw	r24, r22
     c08:	f8 01       	movw	r30, r16
     c0a:	80 83       	st	Z, r24
     c0c:	91 83       	std	Z+1, r25	; 0x01
     c0e:	a2 83       	std	Z+2, r26	; 0x02
     c10:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     c12:	ce 01       	movw	r24, r28
     c14:	81 5b       	subi	r24, 0xB1	; 177
     c16:	9f 4f       	sbci	r25, 0xFF	; 255
     c18:	20 e0       	ldi	r18, 0x00	; 0
     c1a:	30 e0       	ldi	r19, 0x00	; 0
     c1c:	40 e8       	ldi	r20, 0x80	; 128
     c1e:	5f e3       	ldi	r21, 0x3F	; 63
     c20:	fc 01       	movw	r30, r24
     c22:	60 81       	ld	r22, Z
     c24:	71 81       	ldd	r23, Z+1	; 0x01
     c26:	82 81       	ldd	r24, Z+2	; 0x02
     c28:	93 81       	ldd	r25, Z+3	; 0x03
     c2a:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__cmpsf2>
     c2e:	88 23       	and	r24, r24
     c30:	4c f4       	brge	.+18     	; 0xc44 <LCD_init+0x232>
		__ticks = 1;
     c32:	ce 01       	movw	r24, r28
     c34:	8d 5a       	subi	r24, 0xAD	; 173
     c36:	9f 4f       	sbci	r25, 0xFF	; 255
     c38:	21 e0       	ldi	r18, 0x01	; 1
     c3a:	30 e0       	ldi	r19, 0x00	; 0
     c3c:	fc 01       	movw	r30, r24
     c3e:	31 83       	std	Z+1, r19	; 0x01
     c40:	20 83       	st	Z, r18
     c42:	69 c0       	rjmp	.+210    	; 0xd16 <LCD_init+0x304>
	else if (__tmp > 65535)
     c44:	ce 01       	movw	r24, r28
     c46:	81 5b       	subi	r24, 0xB1	; 177
     c48:	9f 4f       	sbci	r25, 0xFF	; 255
     c4a:	20 e0       	ldi	r18, 0x00	; 0
     c4c:	3f ef       	ldi	r19, 0xFF	; 255
     c4e:	4f e7       	ldi	r20, 0x7F	; 127
     c50:	57 e4       	ldi	r21, 0x47	; 71
     c52:	fc 01       	movw	r30, r24
     c54:	60 81       	ld	r22, Z
     c56:	71 81       	ldd	r23, Z+1	; 0x01
     c58:	82 81       	ldd	r24, Z+2	; 0x02
     c5a:	93 81       	ldd	r25, Z+3	; 0x03
     c5c:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <__gesf2>
     c60:	18 16       	cp	r1, r24
     c62:	0c f0       	brlt	.+2      	; 0xc66 <LCD_init+0x254>
     c64:	46 c0       	rjmp	.+140    	; 0xcf2 <LCD_init+0x2e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c66:	20 e0       	ldi	r18, 0x00	; 0
     c68:	30 e0       	ldi	r19, 0x00	; 0
     c6a:	40 e2       	ldi	r20, 0x20	; 32
     c6c:	51 e4       	ldi	r21, 0x41	; 65
     c6e:	6d 81       	ldd	r22, Y+5	; 0x05
     c70:	7e 81       	ldd	r23, Y+6	; 0x06
     c72:	8f 81       	ldd	r24, Y+7	; 0x07
     c74:	98 85       	ldd	r25, Y+8	; 0x08
     c76:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <__mulsf3>
     c7a:	dc 01       	movw	r26, r24
     c7c:	cb 01       	movw	r24, r22
     c7e:	8e 01       	movw	r16, r28
     c80:	0d 5a       	subi	r16, 0xAD	; 173
     c82:	1f 4f       	sbci	r17, 0xFF	; 255
     c84:	bc 01       	movw	r22, r24
     c86:	cd 01       	movw	r24, r26
     c88:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__fixunssfsi>
     c8c:	dc 01       	movw	r26, r24
     c8e:	cb 01       	movw	r24, r22
     c90:	f8 01       	movw	r30, r16
     c92:	91 83       	std	Z+1, r25	; 0x01
     c94:	80 83       	st	Z, r24
     c96:	24 c0       	rjmp	.+72     	; 0xce0 <LCD_init+0x2ce>
     c98:	ce 01       	movw	r24, r28
     c9a:	8b 5a       	subi	r24, 0xAB	; 171
     c9c:	9f 4f       	sbci	r25, 0xFF	; 255
     c9e:	28 ec       	ldi	r18, 0xC8	; 200
     ca0:	30 e0       	ldi	r19, 0x00	; 0
     ca2:	fc 01       	movw	r30, r24
     ca4:	31 83       	std	Z+1, r19	; 0x01
     ca6:	20 83       	st	Z, r18
     ca8:	ce 01       	movw	r24, r28
     caa:	8b 5a       	subi	r24, 0xAB	; 171
     cac:	9f 4f       	sbci	r25, 0xFF	; 255
     cae:	fc 01       	movw	r30, r24
     cb0:	80 81       	ld	r24, Z
     cb2:	91 81       	ldd	r25, Z+1	; 0x01
     cb4:	01 97       	sbiw	r24, 0x01	; 1
     cb6:	f1 f7       	brne	.-4      	; 0xcb4 <LCD_init+0x2a2>
     cb8:	9e 01       	movw	r18, r28
     cba:	2b 5a       	subi	r18, 0xAB	; 171
     cbc:	3f 4f       	sbci	r19, 0xFF	; 255
     cbe:	f9 01       	movw	r30, r18
     cc0:	91 83       	std	Z+1, r25	; 0x01
     cc2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cc4:	ce 01       	movw	r24, r28
     cc6:	8d 5a       	subi	r24, 0xAD	; 173
     cc8:	9f 4f       	sbci	r25, 0xFF	; 255
     cca:	9e 01       	movw	r18, r28
     ccc:	2d 5a       	subi	r18, 0xAD	; 173
     cce:	3f 4f       	sbci	r19, 0xFF	; 255
     cd0:	f9 01       	movw	r30, r18
     cd2:	20 81       	ld	r18, Z
     cd4:	31 81       	ldd	r19, Z+1	; 0x01
     cd6:	21 50       	subi	r18, 0x01	; 1
     cd8:	31 09       	sbc	r19, r1
     cda:	fc 01       	movw	r30, r24
     cdc:	31 83       	std	Z+1, r19	; 0x01
     cde:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ce0:	ce 01       	movw	r24, r28
     ce2:	8d 5a       	subi	r24, 0xAD	; 173
     ce4:	9f 4f       	sbci	r25, 0xFF	; 255
     ce6:	fc 01       	movw	r30, r24
     ce8:	80 81       	ld	r24, Z
     cea:	91 81       	ldd	r25, Z+1	; 0x01
     cec:	89 2b       	or	r24, r25
     cee:	a1 f6       	brne	.-88     	; 0xc98 <LCD_init+0x286>
     cf0:	2c c0       	rjmp	.+88     	; 0xd4a <LCD_init+0x338>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cf2:	8e 01       	movw	r16, r28
     cf4:	0d 5a       	subi	r16, 0xAD	; 173
     cf6:	1f 4f       	sbci	r17, 0xFF	; 255
     cf8:	ce 01       	movw	r24, r28
     cfa:	81 5b       	subi	r24, 0xB1	; 177
     cfc:	9f 4f       	sbci	r25, 0xFF	; 255
     cfe:	fc 01       	movw	r30, r24
     d00:	60 81       	ld	r22, Z
     d02:	71 81       	ldd	r23, Z+1	; 0x01
     d04:	82 81       	ldd	r24, Z+2	; 0x02
     d06:	93 81       	ldd	r25, Z+3	; 0x03
     d08:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__fixunssfsi>
     d0c:	dc 01       	movw	r26, r24
     d0e:	cb 01       	movw	r24, r22
     d10:	f8 01       	movw	r30, r16
     d12:	91 83       	std	Z+1, r25	; 0x01
     d14:	80 83       	st	Z, r24
     d16:	ce 01       	movw	r24, r28
     d18:	89 5a       	subi	r24, 0xA9	; 169
     d1a:	9f 4f       	sbci	r25, 0xFF	; 255
     d1c:	9e 01       	movw	r18, r28
     d1e:	2d 5a       	subi	r18, 0xAD	; 173
     d20:	3f 4f       	sbci	r19, 0xFF	; 255
     d22:	f9 01       	movw	r30, r18
     d24:	20 81       	ld	r18, Z
     d26:	31 81       	ldd	r19, Z+1	; 0x01
     d28:	fc 01       	movw	r30, r24
     d2a:	31 83       	std	Z+1, r19	; 0x01
     d2c:	20 83       	st	Z, r18
     d2e:	ce 01       	movw	r24, r28
     d30:	89 5a       	subi	r24, 0xA9	; 169
     d32:	9f 4f       	sbci	r25, 0xFF	; 255
     d34:	fc 01       	movw	r30, r24
     d36:	80 81       	ld	r24, Z
     d38:	91 81       	ldd	r25, Z+1	; 0x01
     d3a:	01 97       	sbiw	r24, 0x01	; 1
     d3c:	f1 f7       	brne	.-4      	; 0xd3a <LCD_init+0x328>
     d3e:	9e 01       	movw	r18, r28
     d40:	29 5a       	subi	r18, 0xA9	; 169
     d42:	3f 4f       	sbci	r19, 0xFF	; 255
     d44:	f9 01       	movw	r30, r18
     d46:	91 83       	std	Z+1, r25	; 0x01
     d48:	80 83       	st	Z, r24
   _delay_ms(ONE_MS);
   LCD_sendCommand(LCD_4BIT_2);
     d4a:	82 e3       	ldi	r24, 0x32	; 50
     d4c:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <LCD_sendCommand>
     d50:	80 e0       	ldi	r24, 0x00	; 0
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	a0 e8       	ldi	r26, 0x80	; 128
     d56:	bf e3       	ldi	r27, 0x3F	; 63
     d58:	89 87       	std	Y+9, r24	; 0x09
     d5a:	9a 87       	std	Y+10, r25	; 0x0a
     d5c:	ab 87       	std	Y+11, r26	; 0x0b
     d5e:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     d60:	8e 01       	movw	r16, r28
     d62:	0b 5b       	subi	r16, 0xBB	; 187
     d64:	1f 4f       	sbci	r17, 0xFF	; 255
     d66:	20 e0       	ldi	r18, 0x00	; 0
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	4a ef       	ldi	r20, 0xFA	; 250
     d6c:	54 e4       	ldi	r21, 0x44	; 68
     d6e:	69 85       	ldd	r22, Y+9	; 0x09
     d70:	7a 85       	ldd	r23, Y+10	; 0x0a
     d72:	8b 85       	ldd	r24, Y+11	; 0x0b
     d74:	9c 85       	ldd	r25, Y+12	; 0x0c
     d76:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <__mulsf3>
     d7a:	dc 01       	movw	r26, r24
     d7c:	cb 01       	movw	r24, r22
     d7e:	f8 01       	movw	r30, r16
     d80:	80 83       	st	Z, r24
     d82:	91 83       	std	Z+1, r25	; 0x01
     d84:	a2 83       	std	Z+2, r26	; 0x02
     d86:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d88:	ce 01       	movw	r24, r28
     d8a:	8b 5b       	subi	r24, 0xBB	; 187
     d8c:	9f 4f       	sbci	r25, 0xFF	; 255
     d8e:	20 e0       	ldi	r18, 0x00	; 0
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	40 e8       	ldi	r20, 0x80	; 128
     d94:	5f e3       	ldi	r21, 0x3F	; 63
     d96:	fc 01       	movw	r30, r24
     d98:	60 81       	ld	r22, Z
     d9a:	71 81       	ldd	r23, Z+1	; 0x01
     d9c:	82 81       	ldd	r24, Z+2	; 0x02
     d9e:	93 81       	ldd	r25, Z+3	; 0x03
     da0:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__cmpsf2>
     da4:	88 23       	and	r24, r24
     da6:	4c f4       	brge	.+18     	; 0xdba <LCD_init+0x3a8>
		__ticks = 1;
     da8:	ce 01       	movw	r24, r28
     daa:	87 5b       	subi	r24, 0xB7	; 183
     dac:	9f 4f       	sbci	r25, 0xFF	; 255
     dae:	21 e0       	ldi	r18, 0x01	; 1
     db0:	30 e0       	ldi	r19, 0x00	; 0
     db2:	fc 01       	movw	r30, r24
     db4:	31 83       	std	Z+1, r19	; 0x01
     db6:	20 83       	st	Z, r18
     db8:	69 c0       	rjmp	.+210    	; 0xe8c <LCD_init+0x47a>
	else if (__tmp > 65535)
     dba:	ce 01       	movw	r24, r28
     dbc:	8b 5b       	subi	r24, 0xBB	; 187
     dbe:	9f 4f       	sbci	r25, 0xFF	; 255
     dc0:	20 e0       	ldi	r18, 0x00	; 0
     dc2:	3f ef       	ldi	r19, 0xFF	; 255
     dc4:	4f e7       	ldi	r20, 0x7F	; 127
     dc6:	57 e4       	ldi	r21, 0x47	; 71
     dc8:	fc 01       	movw	r30, r24
     dca:	60 81       	ld	r22, Z
     dcc:	71 81       	ldd	r23, Z+1	; 0x01
     dce:	82 81       	ldd	r24, Z+2	; 0x02
     dd0:	93 81       	ldd	r25, Z+3	; 0x03
     dd2:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <__gesf2>
     dd6:	18 16       	cp	r1, r24
     dd8:	0c f0       	brlt	.+2      	; 0xddc <LCD_init+0x3ca>
     dda:	46 c0       	rjmp	.+140    	; 0xe68 <LCD_init+0x456>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ddc:	20 e0       	ldi	r18, 0x00	; 0
     dde:	30 e0       	ldi	r19, 0x00	; 0
     de0:	40 e2       	ldi	r20, 0x20	; 32
     de2:	51 e4       	ldi	r21, 0x41	; 65
     de4:	69 85       	ldd	r22, Y+9	; 0x09
     de6:	7a 85       	ldd	r23, Y+10	; 0x0a
     de8:	8b 85       	ldd	r24, Y+11	; 0x0b
     dea:	9c 85       	ldd	r25, Y+12	; 0x0c
     dec:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <__mulsf3>
     df0:	dc 01       	movw	r26, r24
     df2:	cb 01       	movw	r24, r22
     df4:	8e 01       	movw	r16, r28
     df6:	07 5b       	subi	r16, 0xB7	; 183
     df8:	1f 4f       	sbci	r17, 0xFF	; 255
     dfa:	bc 01       	movw	r22, r24
     dfc:	cd 01       	movw	r24, r26
     dfe:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__fixunssfsi>
     e02:	dc 01       	movw	r26, r24
     e04:	cb 01       	movw	r24, r22
     e06:	f8 01       	movw	r30, r16
     e08:	91 83       	std	Z+1, r25	; 0x01
     e0a:	80 83       	st	Z, r24
     e0c:	24 c0       	rjmp	.+72     	; 0xe56 <LCD_init+0x444>
     e0e:	ce 01       	movw	r24, r28
     e10:	85 5b       	subi	r24, 0xB5	; 181
     e12:	9f 4f       	sbci	r25, 0xFF	; 255
     e14:	28 ec       	ldi	r18, 0xC8	; 200
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	fc 01       	movw	r30, r24
     e1a:	31 83       	std	Z+1, r19	; 0x01
     e1c:	20 83       	st	Z, r18
     e1e:	ce 01       	movw	r24, r28
     e20:	85 5b       	subi	r24, 0xB5	; 181
     e22:	9f 4f       	sbci	r25, 0xFF	; 255
     e24:	fc 01       	movw	r30, r24
     e26:	80 81       	ld	r24, Z
     e28:	91 81       	ldd	r25, Z+1	; 0x01
     e2a:	01 97       	sbiw	r24, 0x01	; 1
     e2c:	f1 f7       	brne	.-4      	; 0xe2a <LCD_init+0x418>
     e2e:	9e 01       	movw	r18, r28
     e30:	25 5b       	subi	r18, 0xB5	; 181
     e32:	3f 4f       	sbci	r19, 0xFF	; 255
     e34:	f9 01       	movw	r30, r18
     e36:	91 83       	std	Z+1, r25	; 0x01
     e38:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e3a:	ce 01       	movw	r24, r28
     e3c:	87 5b       	subi	r24, 0xB7	; 183
     e3e:	9f 4f       	sbci	r25, 0xFF	; 255
     e40:	9e 01       	movw	r18, r28
     e42:	27 5b       	subi	r18, 0xB7	; 183
     e44:	3f 4f       	sbci	r19, 0xFF	; 255
     e46:	f9 01       	movw	r30, r18
     e48:	20 81       	ld	r18, Z
     e4a:	31 81       	ldd	r19, Z+1	; 0x01
     e4c:	21 50       	subi	r18, 0x01	; 1
     e4e:	31 09       	sbc	r19, r1
     e50:	fc 01       	movw	r30, r24
     e52:	31 83       	std	Z+1, r19	; 0x01
     e54:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e56:	ce 01       	movw	r24, r28
     e58:	87 5b       	subi	r24, 0xB7	; 183
     e5a:	9f 4f       	sbci	r25, 0xFF	; 255
     e5c:	fc 01       	movw	r30, r24
     e5e:	80 81       	ld	r24, Z
     e60:	91 81       	ldd	r25, Z+1	; 0x01
     e62:	89 2b       	or	r24, r25
     e64:	a1 f6       	brne	.-88     	; 0xe0e <LCD_init+0x3fc>
     e66:	2c c0       	rjmp	.+88     	; 0xec0 <LCD_init+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e68:	8e 01       	movw	r16, r28
     e6a:	07 5b       	subi	r16, 0xB7	; 183
     e6c:	1f 4f       	sbci	r17, 0xFF	; 255
     e6e:	ce 01       	movw	r24, r28
     e70:	8b 5b       	subi	r24, 0xBB	; 187
     e72:	9f 4f       	sbci	r25, 0xFF	; 255
     e74:	fc 01       	movw	r30, r24
     e76:	60 81       	ld	r22, Z
     e78:	71 81       	ldd	r23, Z+1	; 0x01
     e7a:	82 81       	ldd	r24, Z+2	; 0x02
     e7c:	93 81       	ldd	r25, Z+3	; 0x03
     e7e:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__fixunssfsi>
     e82:	dc 01       	movw	r26, r24
     e84:	cb 01       	movw	r24, r22
     e86:	f8 01       	movw	r30, r16
     e88:	91 83       	std	Z+1, r25	; 0x01
     e8a:	80 83       	st	Z, r24
     e8c:	ce 01       	movw	r24, r28
     e8e:	83 5b       	subi	r24, 0xB3	; 179
     e90:	9f 4f       	sbci	r25, 0xFF	; 255
     e92:	9e 01       	movw	r18, r28
     e94:	27 5b       	subi	r18, 0xB7	; 183
     e96:	3f 4f       	sbci	r19, 0xFF	; 255
     e98:	f9 01       	movw	r30, r18
     e9a:	20 81       	ld	r18, Z
     e9c:	31 81       	ldd	r19, Z+1	; 0x01
     e9e:	fc 01       	movw	r30, r24
     ea0:	31 83       	std	Z+1, r19	; 0x01
     ea2:	20 83       	st	Z, r18
     ea4:	ce 01       	movw	r24, r28
     ea6:	83 5b       	subi	r24, 0xB3	; 179
     ea8:	9f 4f       	sbci	r25, 0xFF	; 255
     eaa:	fc 01       	movw	r30, r24
     eac:	80 81       	ld	r24, Z
     eae:	91 81       	ldd	r25, Z+1	; 0x01
     eb0:	01 97       	sbiw	r24, 0x01	; 1
     eb2:	f1 f7       	brne	.-4      	; 0xeb0 <LCD_init+0x49e>
     eb4:	9e 01       	movw	r18, r28
     eb6:	23 5b       	subi	r18, 0xB3	; 179
     eb8:	3f 4f       	sbci	r19, 0xFF	; 255
     eba:	f9 01       	movw	r30, r18
     ebc:	91 83       	std	Z+1, r25	; 0x01
     ebe:	80 83       	st	Z, r24
   _delay_ms(ONE_MS);
   LCD_sendCommand(LCD_4bit_command);
     ec0:	88 e2       	ldi	r24, 0x28	; 40
     ec2:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <LCD_sendCommand>
     ec6:	80 e0       	ldi	r24, 0x00	; 0
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	a0 e8       	ldi	r26, 0x80	; 128
     ecc:	bf e3       	ldi	r27, 0x3F	; 63
     ece:	8d 87       	std	Y+13, r24	; 0x0d
     ed0:	9e 87       	std	Y+14, r25	; 0x0e
     ed2:	af 87       	std	Y+15, r26	; 0x0f
     ed4:	b8 8b       	std	Y+16, r27	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     ed6:	20 e0       	ldi	r18, 0x00	; 0
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	4a ef       	ldi	r20, 0xFA	; 250
     edc:	54 e4       	ldi	r21, 0x44	; 68
     ede:	6d 85       	ldd	r22, Y+13	; 0x0d
     ee0:	7e 85       	ldd	r23, Y+14	; 0x0e
     ee2:	8f 85       	ldd	r24, Y+15	; 0x0f
     ee4:	98 89       	ldd	r25, Y+16	; 0x10
     ee6:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <__mulsf3>
     eea:	dc 01       	movw	r26, r24
     eec:	cb 01       	movw	r24, r22
     eee:	8b af       	std	Y+59, r24	; 0x3b
     ef0:	9c af       	std	Y+60, r25	; 0x3c
     ef2:	ad af       	std	Y+61, r26	; 0x3d
     ef4:	be af       	std	Y+62, r27	; 0x3e
	if (__tmp < 1.0)
     ef6:	20 e0       	ldi	r18, 0x00	; 0
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	40 e8       	ldi	r20, 0x80	; 128
     efc:	5f e3       	ldi	r21, 0x3F	; 63
     efe:	6b ad       	ldd	r22, Y+59	; 0x3b
     f00:	7c ad       	ldd	r23, Y+60	; 0x3c
     f02:	8d ad       	ldd	r24, Y+61	; 0x3d
     f04:	9e ad       	ldd	r25, Y+62	; 0x3e
     f06:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__cmpsf2>
     f0a:	88 23       	and	r24, r24
     f0c:	44 f4       	brge	.+16     	; 0xf1e <LCD_init+0x50c>
		__ticks = 1;
     f0e:	21 e0       	ldi	r18, 0x01	; 1
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	ce 01       	movw	r24, r28
     f14:	cf 96       	adiw	r24, 0x3f	; 63
     f16:	fc 01       	movw	r30, r24
     f18:	31 83       	std	Z+1, r19	; 0x01
     f1a:	20 83       	st	Z, r18
     f1c:	5f c0       	rjmp	.+190    	; 0xfdc <LCD_init+0x5ca>
	else if (__tmp > 65535)
     f1e:	20 e0       	ldi	r18, 0x00	; 0
     f20:	3f ef       	ldi	r19, 0xFF	; 255
     f22:	4f e7       	ldi	r20, 0x7F	; 127
     f24:	57 e4       	ldi	r21, 0x47	; 71
     f26:	6b ad       	ldd	r22, Y+59	; 0x3b
     f28:	7c ad       	ldd	r23, Y+60	; 0x3c
     f2a:	8d ad       	ldd	r24, Y+61	; 0x3d
     f2c:	9e ad       	ldd	r25, Y+62	; 0x3e
     f2e:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <__gesf2>
     f32:	18 16       	cp	r1, r24
     f34:	0c f0       	brlt	.+2      	; 0xf38 <LCD_init+0x526>
     f36:	44 c0       	rjmp	.+136    	; 0xfc0 <LCD_init+0x5ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f38:	20 e0       	ldi	r18, 0x00	; 0
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	40 e2       	ldi	r20, 0x20	; 32
     f3e:	51 e4       	ldi	r21, 0x41	; 65
     f40:	6d 85       	ldd	r22, Y+13	; 0x0d
     f42:	7e 85       	ldd	r23, Y+14	; 0x0e
     f44:	8f 85       	ldd	r24, Y+15	; 0x0f
     f46:	98 89       	ldd	r25, Y+16	; 0x10
     f48:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <__mulsf3>
     f4c:	dc 01       	movw	r26, r24
     f4e:	cb 01       	movw	r24, r22
     f50:	bc 01       	movw	r22, r24
     f52:	cd 01       	movw	r24, r26
     f54:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__fixunssfsi>
     f58:	dc 01       	movw	r26, r24
     f5a:	cb 01       	movw	r24, r22
     f5c:	9e 01       	movw	r18, r28
     f5e:	21 5c       	subi	r18, 0xC1	; 193
     f60:	3f 4f       	sbci	r19, 0xFF	; 255
     f62:	f9 01       	movw	r30, r18
     f64:	91 83       	std	Z+1, r25	; 0x01
     f66:	80 83       	st	Z, r24
     f68:	23 c0       	rjmp	.+70     	; 0xfb0 <LCD_init+0x59e>
     f6a:	ce 01       	movw	r24, r28
     f6c:	8f 5b       	subi	r24, 0xBF	; 191
     f6e:	9f 4f       	sbci	r25, 0xFF	; 255
     f70:	28 ec       	ldi	r18, 0xC8	; 200
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	fc 01       	movw	r30, r24
     f76:	31 83       	std	Z+1, r19	; 0x01
     f78:	20 83       	st	Z, r18
     f7a:	ce 01       	movw	r24, r28
     f7c:	8f 5b       	subi	r24, 0xBF	; 191
     f7e:	9f 4f       	sbci	r25, 0xFF	; 255
     f80:	fc 01       	movw	r30, r24
     f82:	80 81       	ld	r24, Z
     f84:	91 81       	ldd	r25, Z+1	; 0x01
     f86:	01 97       	sbiw	r24, 0x01	; 1
     f88:	f1 f7       	brne	.-4      	; 0xf86 <LCD_init+0x574>
     f8a:	9e 01       	movw	r18, r28
     f8c:	2f 5b       	subi	r18, 0xBF	; 191
     f8e:	3f 4f       	sbci	r19, 0xFF	; 255
     f90:	f9 01       	movw	r30, r18
     f92:	91 83       	std	Z+1, r25	; 0x01
     f94:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f96:	ce 01       	movw	r24, r28
     f98:	cf 96       	adiw	r24, 0x3f	; 63
     f9a:	fc 01       	movw	r30, r24
     f9c:	80 81       	ld	r24, Z
     f9e:	91 81       	ldd	r25, Z+1	; 0x01
     fa0:	9c 01       	movw	r18, r24
     fa2:	21 50       	subi	r18, 0x01	; 1
     fa4:	31 09       	sbc	r19, r1
     fa6:	ce 01       	movw	r24, r28
     fa8:	cf 96       	adiw	r24, 0x3f	; 63
     faa:	fc 01       	movw	r30, r24
     fac:	31 83       	std	Z+1, r19	; 0x01
     fae:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fb0:	ce 01       	movw	r24, r28
     fb2:	cf 96       	adiw	r24, 0x3f	; 63
     fb4:	fc 01       	movw	r30, r24
     fb6:	80 81       	ld	r24, Z
     fb8:	91 81       	ldd	r25, Z+1	; 0x01
     fba:	89 2b       	or	r24, r25
     fbc:	b1 f6       	brne	.-84     	; 0xf6a <LCD_init+0x558>
     fbe:	28 c0       	rjmp	.+80     	; 0x1010 <LCD_init+0x5fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fc0:	6b ad       	ldd	r22, Y+59	; 0x3b
     fc2:	7c ad       	ldd	r23, Y+60	; 0x3c
     fc4:	8d ad       	ldd	r24, Y+61	; 0x3d
     fc6:	9e ad       	ldd	r25, Y+62	; 0x3e
     fc8:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__fixunssfsi>
     fcc:	dc 01       	movw	r26, r24
     fce:	cb 01       	movw	r24, r22
     fd0:	9e 01       	movw	r18, r28
     fd2:	21 5c       	subi	r18, 0xC1	; 193
     fd4:	3f 4f       	sbci	r19, 0xFF	; 255
     fd6:	f9 01       	movw	r30, r18
     fd8:	91 83       	std	Z+1, r25	; 0x01
     fda:	80 83       	st	Z, r24
     fdc:	ce 01       	movw	r24, r28
     fde:	8d 5b       	subi	r24, 0xBD	; 189
     fe0:	9f 4f       	sbci	r25, 0xFF	; 255
     fe2:	9e 01       	movw	r18, r28
     fe4:	21 5c       	subi	r18, 0xC1	; 193
     fe6:	3f 4f       	sbci	r19, 0xFF	; 255
     fe8:	f9 01       	movw	r30, r18
     fea:	20 81       	ld	r18, Z
     fec:	31 81       	ldd	r19, Z+1	; 0x01
     fee:	fc 01       	movw	r30, r24
     ff0:	31 83       	std	Z+1, r19	; 0x01
     ff2:	20 83       	st	Z, r18
     ff4:	ce 01       	movw	r24, r28
     ff6:	8d 5b       	subi	r24, 0xBD	; 189
     ff8:	9f 4f       	sbci	r25, 0xFF	; 255
     ffa:	fc 01       	movw	r30, r24
     ffc:	80 81       	ld	r24, Z
     ffe:	91 81       	ldd	r25, Z+1	; 0x01
    1000:	01 97       	sbiw	r24, 0x01	; 1
    1002:	f1 f7       	brne	.-4      	; 0x1000 <LCD_init+0x5ee>
    1004:	9e 01       	movw	r18, r28
    1006:	2d 5b       	subi	r18, 0xBD	; 189
    1008:	3f 4f       	sbci	r19, 0xFF	; 255
    100a:	f9 01       	movw	r30, r18
    100c:	91 83       	std	Z+1, r25	; 0x01
    100e:	80 83       	st	Z, r24
   _delay_ms(ONE_MS);
   LCD_sendCommand(LCD_Cursorblinking_command);
    1010:	8e e0       	ldi	r24, 0x0E	; 14
    1012:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <LCD_sendCommand>
    1016:	80 e0       	ldi	r24, 0x00	; 0
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	a0 e8       	ldi	r26, 0x80	; 128
    101c:	bf e3       	ldi	r27, 0x3F	; 63
    101e:	89 8b       	std	Y+17, r24	; 0x11
    1020:	9a 8b       	std	Y+18, r25	; 0x12
    1022:	ab 8b       	std	Y+19, r26	; 0x13
    1024:	bc 8b       	std	Y+20, r27	; 0x14

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1026:	20 e0       	ldi	r18, 0x00	; 0
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	4a ef       	ldi	r20, 0xFA	; 250
    102c:	54 e4       	ldi	r21, 0x44	; 68
    102e:	69 89       	ldd	r22, Y+17	; 0x11
    1030:	7a 89       	ldd	r23, Y+18	; 0x12
    1032:	8b 89       	ldd	r24, Y+19	; 0x13
    1034:	9c 89       	ldd	r25, Y+20	; 0x14
    1036:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <__mulsf3>
    103a:	dc 01       	movw	r26, r24
    103c:	cb 01       	movw	r24, r22
    103e:	89 ab       	std	Y+49, r24	; 0x31
    1040:	9a ab       	std	Y+50, r25	; 0x32
    1042:	ab ab       	std	Y+51, r26	; 0x33
    1044:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1046:	20 e0       	ldi	r18, 0x00	; 0
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	40 e8       	ldi	r20, 0x80	; 128
    104c:	5f e3       	ldi	r21, 0x3F	; 63
    104e:	69 a9       	ldd	r22, Y+49	; 0x31
    1050:	7a a9       	ldd	r23, Y+50	; 0x32
    1052:	8b a9       	ldd	r24, Y+51	; 0x33
    1054:	9c a9       	ldd	r25, Y+52	; 0x34
    1056:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__cmpsf2>
    105a:	88 23       	and	r24, r24
    105c:	2c f4       	brge	.+10     	; 0x1068 <LCD_init+0x656>
		__ticks = 1;
    105e:	81 e0       	ldi	r24, 0x01	; 1
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	9e ab       	std	Y+54, r25	; 0x36
    1064:	8d ab       	std	Y+53, r24	; 0x35
    1066:	3f c0       	rjmp	.+126    	; 0x10e6 <LCD_init+0x6d4>
	else if (__tmp > 65535)
    1068:	20 e0       	ldi	r18, 0x00	; 0
    106a:	3f ef       	ldi	r19, 0xFF	; 255
    106c:	4f e7       	ldi	r20, 0x7F	; 127
    106e:	57 e4       	ldi	r21, 0x47	; 71
    1070:	69 a9       	ldd	r22, Y+49	; 0x31
    1072:	7a a9       	ldd	r23, Y+50	; 0x32
    1074:	8b a9       	ldd	r24, Y+51	; 0x33
    1076:	9c a9       	ldd	r25, Y+52	; 0x34
    1078:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <__gesf2>
    107c:	18 16       	cp	r1, r24
    107e:	4c f5       	brge	.+82     	; 0x10d2 <LCD_init+0x6c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1080:	20 e0       	ldi	r18, 0x00	; 0
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	40 e2       	ldi	r20, 0x20	; 32
    1086:	51 e4       	ldi	r21, 0x41	; 65
    1088:	69 89       	ldd	r22, Y+17	; 0x11
    108a:	7a 89       	ldd	r23, Y+18	; 0x12
    108c:	8b 89       	ldd	r24, Y+19	; 0x13
    108e:	9c 89       	ldd	r25, Y+20	; 0x14
    1090:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <__mulsf3>
    1094:	dc 01       	movw	r26, r24
    1096:	cb 01       	movw	r24, r22
    1098:	bc 01       	movw	r22, r24
    109a:	cd 01       	movw	r24, r26
    109c:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__fixunssfsi>
    10a0:	dc 01       	movw	r26, r24
    10a2:	cb 01       	movw	r24, r22
    10a4:	9e ab       	std	Y+54, r25	; 0x36
    10a6:	8d ab       	std	Y+53, r24	; 0x35
    10a8:	0f c0       	rjmp	.+30     	; 0x10c8 <LCD_init+0x6b6>
    10aa:	88 ec       	ldi	r24, 0xC8	; 200
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	98 af       	std	Y+56, r25	; 0x38
    10b0:	8f ab       	std	Y+55, r24	; 0x37
    10b2:	8f a9       	ldd	r24, Y+55	; 0x37
    10b4:	98 ad       	ldd	r25, Y+56	; 0x38
    10b6:	01 97       	sbiw	r24, 0x01	; 1
    10b8:	f1 f7       	brne	.-4      	; 0x10b6 <LCD_init+0x6a4>
    10ba:	98 af       	std	Y+56, r25	; 0x38
    10bc:	8f ab       	std	Y+55, r24	; 0x37
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10be:	8d a9       	ldd	r24, Y+53	; 0x35
    10c0:	9e a9       	ldd	r25, Y+54	; 0x36
    10c2:	01 97       	sbiw	r24, 0x01	; 1
    10c4:	9e ab       	std	Y+54, r25	; 0x36
    10c6:	8d ab       	std	Y+53, r24	; 0x35
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10c8:	8d a9       	ldd	r24, Y+53	; 0x35
    10ca:	9e a9       	ldd	r25, Y+54	; 0x36
    10cc:	89 2b       	or	r24, r25
    10ce:	69 f7       	brne	.-38     	; 0x10aa <LCD_init+0x698>
    10d0:	14 c0       	rjmp	.+40     	; 0x10fa <LCD_init+0x6e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10d2:	69 a9       	ldd	r22, Y+49	; 0x31
    10d4:	7a a9       	ldd	r23, Y+50	; 0x32
    10d6:	8b a9       	ldd	r24, Y+51	; 0x33
    10d8:	9c a9       	ldd	r25, Y+52	; 0x34
    10da:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__fixunssfsi>
    10de:	dc 01       	movw	r26, r24
    10e0:	cb 01       	movw	r24, r22
    10e2:	9e ab       	std	Y+54, r25	; 0x36
    10e4:	8d ab       	std	Y+53, r24	; 0x35
    10e6:	8d a9       	ldd	r24, Y+53	; 0x35
    10e8:	9e a9       	ldd	r25, Y+54	; 0x36
    10ea:	9a af       	std	Y+58, r25	; 0x3a
    10ec:	89 af       	std	Y+57, r24	; 0x39
    10ee:	89 ad       	ldd	r24, Y+57	; 0x39
    10f0:	9a ad       	ldd	r25, Y+58	; 0x3a
    10f2:	01 97       	sbiw	r24, 0x01	; 1
    10f4:	f1 f7       	brne	.-4      	; 0x10f2 <LCD_init+0x6e0>
    10f6:	9a af       	std	Y+58, r25	; 0x3a
    10f8:	89 af       	std	Y+57, r24	; 0x39
   _delay_ms(ONE_MS);
   LCD_sendCommand(LCD_ClearDisplay_command);
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <LCD_sendCommand>
    1100:	80 e0       	ldi	r24, 0x00	; 0
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	a0 e8       	ldi	r26, 0x80	; 128
    1106:	bf e3       	ldi	r27, 0x3F	; 63
    1108:	8d 8b       	std	Y+21, r24	; 0x15
    110a:	9e 8b       	std	Y+22, r25	; 0x16
    110c:	af 8b       	std	Y+23, r26	; 0x17
    110e:	b8 8f       	std	Y+24, r27	; 0x18

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1110:	20 e0       	ldi	r18, 0x00	; 0
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	4a ef       	ldi	r20, 0xFA	; 250
    1116:	54 e4       	ldi	r21, 0x44	; 68
    1118:	6d 89       	ldd	r22, Y+21	; 0x15
    111a:	7e 89       	ldd	r23, Y+22	; 0x16
    111c:	8f 89       	ldd	r24, Y+23	; 0x17
    111e:	98 8d       	ldd	r25, Y+24	; 0x18
    1120:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <__mulsf3>
    1124:	dc 01       	movw	r26, r24
    1126:	cb 01       	movw	r24, r22
    1128:	8f a3       	std	Y+39, r24	; 0x27
    112a:	98 a7       	std	Y+40, r25	; 0x28
    112c:	a9 a7       	std	Y+41, r26	; 0x29
    112e:	ba a7       	std	Y+42, r27	; 0x2a
	if (__tmp < 1.0)
    1130:	20 e0       	ldi	r18, 0x00	; 0
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	40 e8       	ldi	r20, 0x80	; 128
    1136:	5f e3       	ldi	r21, 0x3F	; 63
    1138:	6f a1       	ldd	r22, Y+39	; 0x27
    113a:	78 a5       	ldd	r23, Y+40	; 0x28
    113c:	89 a5       	ldd	r24, Y+41	; 0x29
    113e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1140:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__cmpsf2>
    1144:	88 23       	and	r24, r24
    1146:	2c f4       	brge	.+10     	; 0x1152 <LCD_init+0x740>
		__ticks = 1;
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	9c a7       	std	Y+44, r25	; 0x2c
    114e:	8b a7       	std	Y+43, r24	; 0x2b
    1150:	3f c0       	rjmp	.+126    	; 0x11d0 <LCD_init+0x7be>
	else if (__tmp > 65535)
    1152:	20 e0       	ldi	r18, 0x00	; 0
    1154:	3f ef       	ldi	r19, 0xFF	; 255
    1156:	4f e7       	ldi	r20, 0x7F	; 127
    1158:	57 e4       	ldi	r21, 0x47	; 71
    115a:	6f a1       	ldd	r22, Y+39	; 0x27
    115c:	78 a5       	ldd	r23, Y+40	; 0x28
    115e:	89 a5       	ldd	r24, Y+41	; 0x29
    1160:	9a a5       	ldd	r25, Y+42	; 0x2a
    1162:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <__gesf2>
    1166:	18 16       	cp	r1, r24
    1168:	4c f5       	brge	.+82     	; 0x11bc <LCD_init+0x7aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    116a:	20 e0       	ldi	r18, 0x00	; 0
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	40 e2       	ldi	r20, 0x20	; 32
    1170:	51 e4       	ldi	r21, 0x41	; 65
    1172:	6d 89       	ldd	r22, Y+21	; 0x15
    1174:	7e 89       	ldd	r23, Y+22	; 0x16
    1176:	8f 89       	ldd	r24, Y+23	; 0x17
    1178:	98 8d       	ldd	r25, Y+24	; 0x18
    117a:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <__mulsf3>
    117e:	dc 01       	movw	r26, r24
    1180:	cb 01       	movw	r24, r22
    1182:	bc 01       	movw	r22, r24
    1184:	cd 01       	movw	r24, r26
    1186:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__fixunssfsi>
    118a:	dc 01       	movw	r26, r24
    118c:	cb 01       	movw	r24, r22
    118e:	9c a7       	std	Y+44, r25	; 0x2c
    1190:	8b a7       	std	Y+43, r24	; 0x2b
    1192:	0f c0       	rjmp	.+30     	; 0x11b2 <LCD_init+0x7a0>
    1194:	88 ec       	ldi	r24, 0xC8	; 200
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	9e a7       	std	Y+46, r25	; 0x2e
    119a:	8d a7       	std	Y+45, r24	; 0x2d
    119c:	8d a5       	ldd	r24, Y+45	; 0x2d
    119e:	9e a5       	ldd	r25, Y+46	; 0x2e
    11a0:	01 97       	sbiw	r24, 0x01	; 1
    11a2:	f1 f7       	brne	.-4      	; 0x11a0 <LCD_init+0x78e>
    11a4:	9e a7       	std	Y+46, r25	; 0x2e
    11a6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11a8:	8b a5       	ldd	r24, Y+43	; 0x2b
    11aa:	9c a5       	ldd	r25, Y+44	; 0x2c
    11ac:	01 97       	sbiw	r24, 0x01	; 1
    11ae:	9c a7       	std	Y+44, r25	; 0x2c
    11b0:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11b2:	8b a5       	ldd	r24, Y+43	; 0x2b
    11b4:	9c a5       	ldd	r25, Y+44	; 0x2c
    11b6:	89 2b       	or	r24, r25
    11b8:	69 f7       	brne	.-38     	; 0x1194 <LCD_init+0x782>
    11ba:	14 c0       	rjmp	.+40     	; 0x11e4 <LCD_init+0x7d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11bc:	6f a1       	ldd	r22, Y+39	; 0x27
    11be:	78 a5       	ldd	r23, Y+40	; 0x28
    11c0:	89 a5       	ldd	r24, Y+41	; 0x29
    11c2:	9a a5       	ldd	r25, Y+42	; 0x2a
    11c4:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__fixunssfsi>
    11c8:	dc 01       	movw	r26, r24
    11ca:	cb 01       	movw	r24, r22
    11cc:	9c a7       	std	Y+44, r25	; 0x2c
    11ce:	8b a7       	std	Y+43, r24	; 0x2b
    11d0:	8b a5       	ldd	r24, Y+43	; 0x2b
    11d2:	9c a5       	ldd	r25, Y+44	; 0x2c
    11d4:	98 ab       	std	Y+48, r25	; 0x30
    11d6:	8f a7       	std	Y+47, r24	; 0x2f
    11d8:	8f a5       	ldd	r24, Y+47	; 0x2f
    11da:	98 a9       	ldd	r25, Y+48	; 0x30
    11dc:	01 97       	sbiw	r24, 0x01	; 1
    11de:	f1 f7       	brne	.-4      	; 0x11dc <LCD_init+0x7ca>
    11e0:	98 ab       	std	Y+48, r25	; 0x30
    11e2:	8f a7       	std	Y+47, r24	; 0x2f
   _delay_ms(ONE_MS);
   LCD_sendCommand(LCD_shiftCursorRight_command);
    11e4:	86 e0       	ldi	r24, 0x06	; 6
    11e6:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <LCD_sendCommand>
    11ea:	80 e0       	ldi	r24, 0x00	; 0
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	a0 e2       	ldi	r26, 0x20	; 32
    11f0:	b1 e4       	ldi	r27, 0x41	; 65
    11f2:	89 8f       	std	Y+25, r24	; 0x19
    11f4:	9a 8f       	std	Y+26, r25	; 0x1a
    11f6:	ab 8f       	std	Y+27, r26	; 0x1b
    11f8:	bc 8f       	std	Y+28, r27	; 0x1c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    11fa:	20 e0       	ldi	r18, 0x00	; 0
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	4a ef       	ldi	r20, 0xFA	; 250
    1200:	54 e4       	ldi	r21, 0x44	; 68
    1202:	69 8d       	ldd	r22, Y+25	; 0x19
    1204:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1206:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1208:	9c 8d       	ldd	r25, Y+28	; 0x1c
    120a:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <__mulsf3>
    120e:	dc 01       	movw	r26, r24
    1210:	cb 01       	movw	r24, r22
    1212:	8d 8f       	std	Y+29, r24	; 0x1d
    1214:	9e 8f       	std	Y+30, r25	; 0x1e
    1216:	af 8f       	std	Y+31, r26	; 0x1f
    1218:	b8 a3       	std	Y+32, r27	; 0x20
	if (__tmp < 1.0)
    121a:	20 e0       	ldi	r18, 0x00	; 0
    121c:	30 e0       	ldi	r19, 0x00	; 0
    121e:	40 e8       	ldi	r20, 0x80	; 128
    1220:	5f e3       	ldi	r21, 0x3F	; 63
    1222:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1224:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1226:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1228:	98 a1       	ldd	r25, Y+32	; 0x20
    122a:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__cmpsf2>
    122e:	88 23       	and	r24, r24
    1230:	2c f4       	brge	.+10     	; 0x123c <LCD_init+0x82a>
		__ticks = 1;
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	9a a3       	std	Y+34, r25	; 0x22
    1238:	89 a3       	std	Y+33, r24	; 0x21
    123a:	3f c0       	rjmp	.+126    	; 0x12ba <LCD_init+0x8a8>
	else if (__tmp > 65535)
    123c:	20 e0       	ldi	r18, 0x00	; 0
    123e:	3f ef       	ldi	r19, 0xFF	; 255
    1240:	4f e7       	ldi	r20, 0x7F	; 127
    1242:	57 e4       	ldi	r21, 0x47	; 71
    1244:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1246:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1248:	8f 8d       	ldd	r24, Y+31	; 0x1f
    124a:	98 a1       	ldd	r25, Y+32	; 0x20
    124c:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <__gesf2>
    1250:	18 16       	cp	r1, r24
    1252:	4c f5       	brge	.+82     	; 0x12a6 <LCD_init+0x894>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1254:	20 e0       	ldi	r18, 0x00	; 0
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	40 e2       	ldi	r20, 0x20	; 32
    125a:	51 e4       	ldi	r21, 0x41	; 65
    125c:	69 8d       	ldd	r22, Y+25	; 0x19
    125e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1260:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1262:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1264:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <__mulsf3>
    1268:	dc 01       	movw	r26, r24
    126a:	cb 01       	movw	r24, r22
    126c:	bc 01       	movw	r22, r24
    126e:	cd 01       	movw	r24, r26
    1270:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__fixunssfsi>
    1274:	dc 01       	movw	r26, r24
    1276:	cb 01       	movw	r24, r22
    1278:	9a a3       	std	Y+34, r25	; 0x22
    127a:	89 a3       	std	Y+33, r24	; 0x21
    127c:	0f c0       	rjmp	.+30     	; 0x129c <LCD_init+0x88a>
    127e:	88 ec       	ldi	r24, 0xC8	; 200
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	9c a3       	std	Y+36, r25	; 0x24
    1284:	8b a3       	std	Y+35, r24	; 0x23
    1286:	8b a1       	ldd	r24, Y+35	; 0x23
    1288:	9c a1       	ldd	r25, Y+36	; 0x24
    128a:	01 97       	sbiw	r24, 0x01	; 1
    128c:	f1 f7       	brne	.-4      	; 0x128a <LCD_init+0x878>
    128e:	9c a3       	std	Y+36, r25	; 0x24
    1290:	8b a3       	std	Y+35, r24	; 0x23
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1292:	89 a1       	ldd	r24, Y+33	; 0x21
    1294:	9a a1       	ldd	r25, Y+34	; 0x22
    1296:	01 97       	sbiw	r24, 0x01	; 1
    1298:	9a a3       	std	Y+34, r25	; 0x22
    129a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    129c:	89 a1       	ldd	r24, Y+33	; 0x21
    129e:	9a a1       	ldd	r25, Y+34	; 0x22
    12a0:	89 2b       	or	r24, r25
    12a2:	69 f7       	brne	.-38     	; 0x127e <LCD_init+0x86c>
   _delay_ms(TEN_MS);
  
}
    12a4:	14 c0       	rjmp	.+40     	; 0x12ce <LCD_init+0x8bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12a6:	6d 8d       	ldd	r22, Y+29	; 0x1d
    12a8:	7e 8d       	ldd	r23, Y+30	; 0x1e
    12aa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    12ac:	98 a1       	ldd	r25, Y+32	; 0x20
    12ae:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__fixunssfsi>
    12b2:	dc 01       	movw	r26, r24
    12b4:	cb 01       	movw	r24, r22
    12b6:	9a a3       	std	Y+34, r25	; 0x22
    12b8:	89 a3       	std	Y+33, r24	; 0x21
    12ba:	89 a1       	ldd	r24, Y+33	; 0x21
    12bc:	9a a1       	ldd	r25, Y+34	; 0x22
    12be:	9e a3       	std	Y+38, r25	; 0x26
    12c0:	8d a3       	std	Y+37, r24	; 0x25
    12c2:	8d a1       	ldd	r24, Y+37	; 0x25
    12c4:	9e a1       	ldd	r25, Y+38	; 0x26
    12c6:	01 97       	sbiw	r24, 0x01	; 1
    12c8:	f1 f7       	brne	.-4      	; 0x12c6 <LCD_init+0x8b4>
    12ca:	9e a3       	std	Y+38, r25	; 0x26
    12cc:	8d a3       	std	Y+37, r24	; 0x25
    12ce:	00 00       	nop
    12d0:	ce 59       	subi	r28, 0x9E	; 158
    12d2:	df 4f       	sbci	r29, 0xFF	; 255
    12d4:	0f b6       	in	r0, 0x3f	; 63
    12d6:	f8 94       	cli
    12d8:	de bf       	out	0x3e, r29	; 62
    12da:	0f be       	out	0x3f, r0	; 63
    12dc:	cd bf       	out	0x3d, r28	; 61
    12de:	df 91       	pop	r29
    12e0:	cf 91       	pop	r28
    12e2:	1f 91       	pop	r17
    12e4:	0f 91       	pop	r16
    12e6:	08 95       	ret

000012e8 <main>:
#define High 1
#define Low  0 

 
int main(void)
{
    12e8:	cf 93       	push	r28
    12ea:	df 93       	push	r29
    12ec:	cd b7       	in	r28, 0x3d	; 61
    12ee:	de b7       	in	r29, 0x3e	; 62
    12f0:	2e 97       	sbiw	r28, 0x0e	; 14
    12f2:	0f b6       	in	r0, 0x3f	; 63
    12f4:	f8 94       	cli
    12f6:	de bf       	out	0x3e, r29	; 62
    12f8:	0f be       	out	0x3f, r0	; 63
    12fa:	cd bf       	out	0x3d, r28	; 61
	DIO_SetPinDirection(led3,output);
	DIO_SetPinDirection(Button0,input);
	DIO_SetPinDirection(Button1,input);
	DIO_SetPinDirection(12,output);*/
	//Keypad_init();
	LCD_init();
    12fc:	0e 94 09 05 	call	0xa12	; 0xa12 <LCD_init>
    1300:	80 e0       	ldi	r24, 0x00	; 0
    1302:	90 e4       	ldi	r25, 0x40	; 64
    1304:	ac e9       	ldi	r26, 0x9C	; 156
    1306:	b5 e4       	ldi	r27, 0x45	; 69
    1308:	89 83       	std	Y+1, r24	; 0x01
    130a:	9a 83       	std	Y+2, r25	; 0x02
    130c:	ab 83       	std	Y+3, r26	; 0x03
    130e:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1310:	20 e0       	ldi	r18, 0x00	; 0
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	4a e7       	ldi	r20, 0x7A	; 122
    1316:	53 e4       	ldi	r21, 0x43	; 67
    1318:	69 81       	ldd	r22, Y+1	; 0x01
    131a:	7a 81       	ldd	r23, Y+2	; 0x02
    131c:	8b 81       	ldd	r24, Y+3	; 0x03
    131e:	9c 81       	ldd	r25, Y+4	; 0x04
    1320:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <__mulsf3>
    1324:	dc 01       	movw	r26, r24
    1326:	cb 01       	movw	r24, r22
    1328:	8d 83       	std	Y+5, r24	; 0x05
    132a:	9e 83       	std	Y+6, r25	; 0x06
    132c:	af 83       	std	Y+7, r26	; 0x07
    132e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1330:	20 e0       	ldi	r18, 0x00	; 0
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	40 e8       	ldi	r20, 0x80	; 128
    1336:	5f e3       	ldi	r21, 0x3F	; 63
    1338:	6d 81       	ldd	r22, Y+5	; 0x05
    133a:	7e 81       	ldd	r23, Y+6	; 0x06
    133c:	8f 81       	ldd	r24, Y+7	; 0x07
    133e:	98 85       	ldd	r25, Y+8	; 0x08
    1340:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__cmpsf2>
    1344:	88 23       	and	r24, r24
    1346:	2c f4       	brge	.+10     	; 0x1352 <main+0x6a>
		__ticks = 1;
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	9a 87       	std	Y+10, r25	; 0x0a
    134e:	89 87       	std	Y+9, r24	; 0x09
    1350:	3f c0       	rjmp	.+126    	; 0x13d0 <main+0xe8>
	else if (__tmp > 65535)
    1352:	20 e0       	ldi	r18, 0x00	; 0
    1354:	3f ef       	ldi	r19, 0xFF	; 255
    1356:	4f e7       	ldi	r20, 0x7F	; 127
    1358:	57 e4       	ldi	r21, 0x47	; 71
    135a:	6d 81       	ldd	r22, Y+5	; 0x05
    135c:	7e 81       	ldd	r23, Y+6	; 0x06
    135e:	8f 81       	ldd	r24, Y+7	; 0x07
    1360:	98 85       	ldd	r25, Y+8	; 0x08
    1362:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <__gesf2>
    1366:	18 16       	cp	r1, r24
    1368:	4c f5       	brge	.+82     	; 0x13bc <main+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    136a:	20 e0       	ldi	r18, 0x00	; 0
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	40 e2       	ldi	r20, 0x20	; 32
    1370:	51 e4       	ldi	r21, 0x41	; 65
    1372:	69 81       	ldd	r22, Y+1	; 0x01
    1374:	7a 81       	ldd	r23, Y+2	; 0x02
    1376:	8b 81       	ldd	r24, Y+3	; 0x03
    1378:	9c 81       	ldd	r25, Y+4	; 0x04
    137a:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <__mulsf3>
    137e:	dc 01       	movw	r26, r24
    1380:	cb 01       	movw	r24, r22
    1382:	bc 01       	movw	r22, r24
    1384:	cd 01       	movw	r24, r26
    1386:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__fixunssfsi>
    138a:	dc 01       	movw	r26, r24
    138c:	cb 01       	movw	r24, r22
    138e:	9a 87       	std	Y+10, r25	; 0x0a
    1390:	89 87       	std	Y+9, r24	; 0x09
    1392:	0f c0       	rjmp	.+30     	; 0x13b2 <main+0xca>
    1394:	89 e1       	ldi	r24, 0x19	; 25
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	9c 87       	std	Y+12, r25	; 0x0c
    139a:	8b 87       	std	Y+11, r24	; 0x0b
    139c:	8b 85       	ldd	r24, Y+11	; 0x0b
    139e:	9c 85       	ldd	r25, Y+12	; 0x0c
    13a0:	01 97       	sbiw	r24, 0x01	; 1
    13a2:	f1 f7       	brne	.-4      	; 0x13a0 <main+0xb8>
    13a4:	9c 87       	std	Y+12, r25	; 0x0c
    13a6:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13a8:	89 85       	ldd	r24, Y+9	; 0x09
    13aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    13ac:	01 97       	sbiw	r24, 0x01	; 1
    13ae:	9a 87       	std	Y+10, r25	; 0x0a
    13b0:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13b2:	89 85       	ldd	r24, Y+9	; 0x09
    13b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    13b6:	89 2b       	or	r24, r25
    13b8:	69 f7       	brne	.-38     	; 0x1394 <main+0xac>
    13ba:	14 c0       	rjmp	.+40     	; 0x13e4 <main+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13bc:	6d 81       	ldd	r22, Y+5	; 0x05
    13be:	7e 81       	ldd	r23, Y+6	; 0x06
    13c0:	8f 81       	ldd	r24, Y+7	; 0x07
    13c2:	98 85       	ldd	r25, Y+8	; 0x08
    13c4:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__fixunssfsi>
    13c8:	dc 01       	movw	r26, r24
    13ca:	cb 01       	movw	r24, r22
    13cc:	9a 87       	std	Y+10, r25	; 0x0a
    13ce:	89 87       	std	Y+9, r24	; 0x09
    13d0:	89 85       	ldd	r24, Y+9	; 0x09
    13d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    13d4:	9e 87       	std	Y+14, r25	; 0x0e
    13d6:	8d 87       	std	Y+13, r24	; 0x0d
    13d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    13da:	9e 85       	ldd	r25, Y+14	; 0x0e
    13dc:	01 97       	sbiw	r24, 0x01	; 1
    13de:	f1 f7       	brne	.-4      	; 0x13dc <main+0xf4>
    13e0:	9e 87       	std	Y+14, r25	; 0x0e
    13e2:	8d 87       	std	Y+13, r24	; 0x0d
    {
	/* LCD_displayChar('A');  */
	/*LCD_displayString("kareem ");
	_delay_ms(1000);*/
	
	}  
    13e4:	ff cf       	rjmp	.-2      	; 0x13e4 <main+0xfc>

000013e6 <__cmpsf2>:
    13e6:	0e 94 27 0a 	call	0x144e	; 0x144e <__fp_cmp>
    13ea:	08 f4       	brcc	.+2      	; 0x13ee <__cmpsf2+0x8>
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	08 95       	ret

000013f0 <__fixunssfsi>:
    13f0:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <__fp_splitA>
    13f4:	88 f0       	brcs	.+34     	; 0x1418 <__fixunssfsi+0x28>
    13f6:	9f 57       	subi	r25, 0x7F	; 127
    13f8:	98 f0       	brcs	.+38     	; 0x1420 <__fixunssfsi+0x30>
    13fa:	b9 2f       	mov	r27, r25
    13fc:	99 27       	eor	r25, r25
    13fe:	b7 51       	subi	r27, 0x17	; 23
    1400:	b0 f0       	brcs	.+44     	; 0x142e <__fixunssfsi+0x3e>
    1402:	e1 f0       	breq	.+56     	; 0x143c <__fixunssfsi+0x4c>
    1404:	66 0f       	add	r22, r22
    1406:	77 1f       	adc	r23, r23
    1408:	88 1f       	adc	r24, r24
    140a:	99 1f       	adc	r25, r25
    140c:	1a f0       	brmi	.+6      	; 0x1414 <__fixunssfsi+0x24>
    140e:	ba 95       	dec	r27
    1410:	c9 f7       	brne	.-14     	; 0x1404 <__fixunssfsi+0x14>
    1412:	14 c0       	rjmp	.+40     	; 0x143c <__fixunssfsi+0x4c>
    1414:	b1 30       	cpi	r27, 0x01	; 1
    1416:	91 f0       	breq	.+36     	; 0x143c <__fixunssfsi+0x4c>
    1418:	0e 94 6d 0a 	call	0x14da	; 0x14da <__fp_zero>
    141c:	b1 e0       	ldi	r27, 0x01	; 1
    141e:	08 95       	ret
    1420:	0c 94 6d 0a 	jmp	0x14da	; 0x14da <__fp_zero>
    1424:	67 2f       	mov	r22, r23
    1426:	78 2f       	mov	r23, r24
    1428:	88 27       	eor	r24, r24
    142a:	b8 5f       	subi	r27, 0xF8	; 248
    142c:	39 f0       	breq	.+14     	; 0x143c <__fixunssfsi+0x4c>
    142e:	b9 3f       	cpi	r27, 0xF9	; 249
    1430:	cc f3       	brlt	.-14     	; 0x1424 <__fixunssfsi+0x34>
    1432:	86 95       	lsr	r24
    1434:	77 95       	ror	r23
    1436:	67 95       	ror	r22
    1438:	b3 95       	inc	r27
    143a:	d9 f7       	brne	.-10     	; 0x1432 <__fixunssfsi+0x42>
    143c:	3e f4       	brtc	.+14     	; 0x144c <__fixunssfsi+0x5c>
    143e:	90 95       	com	r25
    1440:	80 95       	com	r24
    1442:	70 95       	com	r23
    1444:	61 95       	neg	r22
    1446:	7f 4f       	sbci	r23, 0xFF	; 255
    1448:	8f 4f       	sbci	r24, 0xFF	; 255
    144a:	9f 4f       	sbci	r25, 0xFF	; 255
    144c:	08 95       	ret

0000144e <__fp_cmp>:
    144e:	99 0f       	add	r25, r25
    1450:	00 08       	sbc	r0, r0
    1452:	55 0f       	add	r21, r21
    1454:	aa 0b       	sbc	r26, r26
    1456:	e0 e8       	ldi	r30, 0x80	; 128
    1458:	fe ef       	ldi	r31, 0xFE	; 254
    145a:	16 16       	cp	r1, r22
    145c:	17 06       	cpc	r1, r23
    145e:	e8 07       	cpc	r30, r24
    1460:	f9 07       	cpc	r31, r25
    1462:	c0 f0       	brcs	.+48     	; 0x1494 <__fp_cmp+0x46>
    1464:	12 16       	cp	r1, r18
    1466:	13 06       	cpc	r1, r19
    1468:	e4 07       	cpc	r30, r20
    146a:	f5 07       	cpc	r31, r21
    146c:	98 f0       	brcs	.+38     	; 0x1494 <__fp_cmp+0x46>
    146e:	62 1b       	sub	r22, r18
    1470:	73 0b       	sbc	r23, r19
    1472:	84 0b       	sbc	r24, r20
    1474:	95 0b       	sbc	r25, r21
    1476:	39 f4       	brne	.+14     	; 0x1486 <__fp_cmp+0x38>
    1478:	0a 26       	eor	r0, r26
    147a:	61 f0       	breq	.+24     	; 0x1494 <__fp_cmp+0x46>
    147c:	23 2b       	or	r18, r19
    147e:	24 2b       	or	r18, r20
    1480:	25 2b       	or	r18, r21
    1482:	21 f4       	brne	.+8      	; 0x148c <__fp_cmp+0x3e>
    1484:	08 95       	ret
    1486:	0a 26       	eor	r0, r26
    1488:	09 f4       	brne	.+2      	; 0x148c <__fp_cmp+0x3e>
    148a:	a1 40       	sbci	r26, 0x01	; 1
    148c:	a6 95       	lsr	r26
    148e:	8f ef       	ldi	r24, 0xFF	; 255
    1490:	81 1d       	adc	r24, r1
    1492:	81 1d       	adc	r24, r1
    1494:	08 95       	ret

00001496 <__fp_split3>:
    1496:	57 fd       	sbrc	r21, 7
    1498:	90 58       	subi	r25, 0x80	; 128
    149a:	44 0f       	add	r20, r20
    149c:	55 1f       	adc	r21, r21
    149e:	59 f0       	breq	.+22     	; 0x14b6 <__fp_splitA+0x10>
    14a0:	5f 3f       	cpi	r21, 0xFF	; 255
    14a2:	71 f0       	breq	.+28     	; 0x14c0 <__fp_splitA+0x1a>
    14a4:	47 95       	ror	r20

000014a6 <__fp_splitA>:
    14a6:	88 0f       	add	r24, r24
    14a8:	97 fb       	bst	r25, 7
    14aa:	99 1f       	adc	r25, r25
    14ac:	61 f0       	breq	.+24     	; 0x14c6 <__fp_splitA+0x20>
    14ae:	9f 3f       	cpi	r25, 0xFF	; 255
    14b0:	79 f0       	breq	.+30     	; 0x14d0 <__fp_splitA+0x2a>
    14b2:	87 95       	ror	r24
    14b4:	08 95       	ret
    14b6:	12 16       	cp	r1, r18
    14b8:	13 06       	cpc	r1, r19
    14ba:	14 06       	cpc	r1, r20
    14bc:	55 1f       	adc	r21, r21
    14be:	f2 cf       	rjmp	.-28     	; 0x14a4 <__fp_split3+0xe>
    14c0:	46 95       	lsr	r20
    14c2:	f1 df       	rcall	.-30     	; 0x14a6 <__fp_splitA>
    14c4:	08 c0       	rjmp	.+16     	; 0x14d6 <__fp_splitA+0x30>
    14c6:	16 16       	cp	r1, r22
    14c8:	17 06       	cpc	r1, r23
    14ca:	18 06       	cpc	r1, r24
    14cc:	99 1f       	adc	r25, r25
    14ce:	f1 cf       	rjmp	.-30     	; 0x14b2 <__fp_splitA+0xc>
    14d0:	86 95       	lsr	r24
    14d2:	71 05       	cpc	r23, r1
    14d4:	61 05       	cpc	r22, r1
    14d6:	08 94       	sec
    14d8:	08 95       	ret

000014da <__fp_zero>:
    14da:	e8 94       	clt

000014dc <__fp_szero>:
    14dc:	bb 27       	eor	r27, r27
    14de:	66 27       	eor	r22, r22
    14e0:	77 27       	eor	r23, r23
    14e2:	cb 01       	movw	r24, r22
    14e4:	97 f9       	bld	r25, 7
    14e6:	08 95       	ret

000014e8 <__gesf2>:
    14e8:	0e 94 27 0a 	call	0x144e	; 0x144e <__fp_cmp>
    14ec:	08 f4       	brcc	.+2      	; 0x14f0 <__gesf2+0x8>
    14ee:	8f ef       	ldi	r24, 0xFF	; 255
    14f0:	08 95       	ret

000014f2 <__mulsf3>:
    14f2:	0e 94 8c 0a 	call	0x1518	; 0x1518 <__mulsf3x>
    14f6:	0c 94 fd 0a 	jmp	0x15fa	; 0x15fa <__fp_round>
    14fa:	0e 94 ef 0a 	call	0x15de	; 0x15de <__fp_pscA>
    14fe:	38 f0       	brcs	.+14     	; 0x150e <__mulsf3+0x1c>
    1500:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <__fp_pscB>
    1504:	20 f0       	brcs	.+8      	; 0x150e <__mulsf3+0x1c>
    1506:	95 23       	and	r25, r21
    1508:	11 f0       	breq	.+4      	; 0x150e <__mulsf3+0x1c>
    150a:	0c 94 e6 0a 	jmp	0x15cc	; 0x15cc <__fp_inf>
    150e:	0c 94 ec 0a 	jmp	0x15d8	; 0x15d8 <__fp_nan>
    1512:	11 24       	eor	r1, r1
    1514:	0c 94 6e 0a 	jmp	0x14dc	; 0x14dc <__fp_szero>

00001518 <__mulsf3x>:
    1518:	0e 94 4b 0a 	call	0x1496	; 0x1496 <__fp_split3>
    151c:	70 f3       	brcs	.-36     	; 0x14fa <__mulsf3+0x8>

0000151e <__mulsf3_pse>:
    151e:	95 9f       	mul	r25, r21
    1520:	c1 f3       	breq	.-16     	; 0x1512 <__mulsf3+0x20>
    1522:	95 0f       	add	r25, r21
    1524:	50 e0       	ldi	r21, 0x00	; 0
    1526:	55 1f       	adc	r21, r21
    1528:	62 9f       	mul	r22, r18
    152a:	f0 01       	movw	r30, r0
    152c:	72 9f       	mul	r23, r18
    152e:	bb 27       	eor	r27, r27
    1530:	f0 0d       	add	r31, r0
    1532:	b1 1d       	adc	r27, r1
    1534:	63 9f       	mul	r22, r19
    1536:	aa 27       	eor	r26, r26
    1538:	f0 0d       	add	r31, r0
    153a:	b1 1d       	adc	r27, r1
    153c:	aa 1f       	adc	r26, r26
    153e:	64 9f       	mul	r22, r20
    1540:	66 27       	eor	r22, r22
    1542:	b0 0d       	add	r27, r0
    1544:	a1 1d       	adc	r26, r1
    1546:	66 1f       	adc	r22, r22
    1548:	82 9f       	mul	r24, r18
    154a:	22 27       	eor	r18, r18
    154c:	b0 0d       	add	r27, r0
    154e:	a1 1d       	adc	r26, r1
    1550:	62 1f       	adc	r22, r18
    1552:	73 9f       	mul	r23, r19
    1554:	b0 0d       	add	r27, r0
    1556:	a1 1d       	adc	r26, r1
    1558:	62 1f       	adc	r22, r18
    155a:	83 9f       	mul	r24, r19
    155c:	a0 0d       	add	r26, r0
    155e:	61 1d       	adc	r22, r1
    1560:	22 1f       	adc	r18, r18
    1562:	74 9f       	mul	r23, r20
    1564:	33 27       	eor	r19, r19
    1566:	a0 0d       	add	r26, r0
    1568:	61 1d       	adc	r22, r1
    156a:	23 1f       	adc	r18, r19
    156c:	84 9f       	mul	r24, r20
    156e:	60 0d       	add	r22, r0
    1570:	21 1d       	adc	r18, r1
    1572:	82 2f       	mov	r24, r18
    1574:	76 2f       	mov	r23, r22
    1576:	6a 2f       	mov	r22, r26
    1578:	11 24       	eor	r1, r1
    157a:	9f 57       	subi	r25, 0x7F	; 127
    157c:	50 40       	sbci	r21, 0x00	; 0
    157e:	9a f0       	brmi	.+38     	; 0x15a6 <__mulsf3_pse+0x88>
    1580:	f1 f0       	breq	.+60     	; 0x15be <__mulsf3_pse+0xa0>
    1582:	88 23       	and	r24, r24
    1584:	4a f0       	brmi	.+18     	; 0x1598 <__mulsf3_pse+0x7a>
    1586:	ee 0f       	add	r30, r30
    1588:	ff 1f       	adc	r31, r31
    158a:	bb 1f       	adc	r27, r27
    158c:	66 1f       	adc	r22, r22
    158e:	77 1f       	adc	r23, r23
    1590:	88 1f       	adc	r24, r24
    1592:	91 50       	subi	r25, 0x01	; 1
    1594:	50 40       	sbci	r21, 0x00	; 0
    1596:	a9 f7       	brne	.-22     	; 0x1582 <__mulsf3_pse+0x64>
    1598:	9e 3f       	cpi	r25, 0xFE	; 254
    159a:	51 05       	cpc	r21, r1
    159c:	80 f0       	brcs	.+32     	; 0x15be <__mulsf3_pse+0xa0>
    159e:	0c 94 e6 0a 	jmp	0x15cc	; 0x15cc <__fp_inf>
    15a2:	0c 94 6e 0a 	jmp	0x14dc	; 0x14dc <__fp_szero>
    15a6:	5f 3f       	cpi	r21, 0xFF	; 255
    15a8:	e4 f3       	brlt	.-8      	; 0x15a2 <__mulsf3_pse+0x84>
    15aa:	98 3e       	cpi	r25, 0xE8	; 232
    15ac:	d4 f3       	brlt	.-12     	; 0x15a2 <__mulsf3_pse+0x84>
    15ae:	86 95       	lsr	r24
    15b0:	77 95       	ror	r23
    15b2:	67 95       	ror	r22
    15b4:	b7 95       	ror	r27
    15b6:	f7 95       	ror	r31
    15b8:	e7 95       	ror	r30
    15ba:	9f 5f       	subi	r25, 0xFF	; 255
    15bc:	c1 f7       	brne	.-16     	; 0x15ae <__mulsf3_pse+0x90>
    15be:	fe 2b       	or	r31, r30
    15c0:	88 0f       	add	r24, r24
    15c2:	91 1d       	adc	r25, r1
    15c4:	96 95       	lsr	r25
    15c6:	87 95       	ror	r24
    15c8:	97 f9       	bld	r25, 7
    15ca:	08 95       	ret

000015cc <__fp_inf>:
    15cc:	97 f9       	bld	r25, 7
    15ce:	9f 67       	ori	r25, 0x7F	; 127
    15d0:	80 e8       	ldi	r24, 0x80	; 128
    15d2:	70 e0       	ldi	r23, 0x00	; 0
    15d4:	60 e0       	ldi	r22, 0x00	; 0
    15d6:	08 95       	ret

000015d8 <__fp_nan>:
    15d8:	9f ef       	ldi	r25, 0xFF	; 255
    15da:	80 ec       	ldi	r24, 0xC0	; 192
    15dc:	08 95       	ret

000015de <__fp_pscA>:
    15de:	00 24       	eor	r0, r0
    15e0:	0a 94       	dec	r0
    15e2:	16 16       	cp	r1, r22
    15e4:	17 06       	cpc	r1, r23
    15e6:	18 06       	cpc	r1, r24
    15e8:	09 06       	cpc	r0, r25
    15ea:	08 95       	ret

000015ec <__fp_pscB>:
    15ec:	00 24       	eor	r0, r0
    15ee:	0a 94       	dec	r0
    15f0:	12 16       	cp	r1, r18
    15f2:	13 06       	cpc	r1, r19
    15f4:	14 06       	cpc	r1, r20
    15f6:	05 06       	cpc	r0, r21
    15f8:	08 95       	ret

000015fa <__fp_round>:
    15fa:	09 2e       	mov	r0, r25
    15fc:	03 94       	inc	r0
    15fe:	00 0c       	add	r0, r0
    1600:	11 f4       	brne	.+4      	; 0x1606 <__fp_round+0xc>
    1602:	88 23       	and	r24, r24
    1604:	52 f0       	brmi	.+20     	; 0x161a <__fp_round+0x20>
    1606:	bb 0f       	add	r27, r27
    1608:	40 f4       	brcc	.+16     	; 0x161a <__fp_round+0x20>
    160a:	bf 2b       	or	r27, r31
    160c:	11 f4       	brne	.+4      	; 0x1612 <__fp_round+0x18>
    160e:	60 ff       	sbrs	r22, 0
    1610:	04 c0       	rjmp	.+8      	; 0x161a <__fp_round+0x20>
    1612:	6f 5f       	subi	r22, 0xFF	; 255
    1614:	7f 4f       	sbci	r23, 0xFF	; 255
    1616:	8f 4f       	sbci	r24, 0xFF	; 255
    1618:	9f 4f       	sbci	r25, 0xFF	; 255
    161a:	08 95       	ret

0000161c <_exit>:
    161c:	f8 94       	cli

0000161e <__stop_program>:
    161e:	ff cf       	rjmp	.-2      	; 0x161e <__stop_program>
